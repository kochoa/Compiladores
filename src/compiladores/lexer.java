/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package compiladores;
import compiladores.sym;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/compiladores/Visual.flex</tt>
 */
class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int str = 2;
  public static final int com = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\34\1\62\1\62\1\34\22\0\1\50\1\0\1\46"+
    "\3\0\1\45\1\61\1\56\1\57\1\54\1\53\1\41\1\52\1\0"+
    "\1\55\12\35\1\40\1\0\1\42\1\33\1\43\2\0\1\1\1\3"+
    "\1\10\1\13\1\6\1\17\1\24\1\11\1\32\2\30\1\5\1\15"+
    "\1\7\1\4\1\23\1\27\1\12\1\31\1\21\1\16\1\26\1\20"+
    "\1\25\1\22\1\30\1\0\1\47\1\0\1\44\1\60\1\0\1\1"+
    "\1\3\1\10\1\13\1\6\1\17\1\24\1\11\1\32\2\30\1\5"+
    "\1\15\1\7\1\4\1\23\1\27\1\12\1\31\1\21\1\16\1\26"+
    "\1\20\1\25\1\22\1\30\1\36\1\0\1\37\7\0\1\62\252\0"+
    "\2\14\115\0\1\2\u1ea8\0\1\62\1\62\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\11\2\1\1\10\2\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\31"+
    "\1\33\1\34\1\2\1\34\3\0\2\2\1\35\12\2"+
    "\1\36\1\0\1\2\2\0\1\37\6\2\1\40\12\2"+
    "\1\37\1\0\1\41\1\42\1\43\2\0\1\44\1\45"+
    "\1\0\1\46\2\0\4\2\1\0\1\2\1\47\1\0"+
    "\1\2\1\50\1\51\1\2\1\0\5\2\2\52\1\0"+
    "\1\53\1\0\2\2\1\54\2\2\1\0\4\2\1\0"+
    "\1\2\1\55\1\2\1\46\3\2\1\53\1\0\1\20"+
    "\1\0\1\56\2\0\3\2\1\57\2\60\1\0\2\61"+
    "\1\62\1\63\1\64\1\63\1\65\2\2\1\0\2\66"+
    "\1\0\2\2\1\0\1\2\1\67\1\70\1\71\2\0"+
    "\3\2\1\56\3\2\4\0\1\2\1\72\1\73\10\0"+
    "\3\2\1\0\1\70\1\74\1\2\2\75\1\76\1\0"+
    "\1\76\5\2\1\0\1\77\1\100\1\0\1\2\3\0"+
    "\1\101\5\0\1\2\1\102\1\103\2\0\1\2\1\0"+
    "\1\2\1\77\1\2\1\100\1\2\2\0\1\104\1\105"+
    "\1\106\1\0\1\107\1\110\3\0\2\111\1\112\1\0"+
    "\1\2\2\113\1\104\1\112\1\114\4\0\1\115\2\116"+
    "\3\0\1\117\1\0\1\120\1\0\1\121\1\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\231\0\u04c8\0\u04fb\0\u052e\0\231\0\231\0\231\0\u0561"+
    "\0\u0594\0\231\0\231\0\231\0\231\0\u05c7\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\u05fa\0\u05c7\0\u062d\0\231\0\u0660\0\u0264\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0264\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\231\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0264\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0264\0\u0dbf"+
    "\0\231\0\231\0\231\0\u05c7\0\u0df2\0\231\0\u0264\0\u0e25"+
    "\0\231\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u0264\0\u0264\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\231\0\u0264\0\u11ee"+
    "\0\231\0\u1221\0\u1254\0\u1287\0\u0264\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u0264\0\u1485"+
    "\0\u0264\0\u14b8\0\u14eb\0\u151e\0\u0264\0\u1551\0\u1584\0\u15b7"+
    "\0\231\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u0264\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u0264\0\231\0\u0264\0\u0264"+
    "\0\u0264\0\u17e8\0\u181b\0\u184e\0\231\0\u0264\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u0264\0\u0264\0\u0264\0\u1980\0\u19b3"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u0264\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u0264\0\u0264\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1782\0\u1d7c\0\u1daf"+
    "\0\u1de2\0\u1e15\0\231\0\u0264\0\u1e48\0\231\0\u0264\0\231"+
    "\0\u1e7b\0\u0264\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\231\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\231"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u0264\0\u0264"+
    "\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u0264"+
    "\0\u23a9\0\u23dc\0\u240f\0\231\0\u0264\0\231\0\u2442\0\231"+
    "\0\231\0\u2475\0\u24a8\0\u24db\0\231\0\u0264\0\231\0\u250e"+
    "\0\u2541\0\231\0\u0264\0\u0264\0\u0264\0\231\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\231\0\231\0\u0264\0\u2640\0\u2673\0\u26a6"+
    "\0\231\0\u26d9\0\231\0\u270c\0\231\0\u273f\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\15\1\22"+
    "\1\23\1\24\1\15\1\25\1\15\1\26\3\15\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\0\34\60\1\0\11\60\1\61\1\62\1\63\11\60"+
    "\1\0\34\60\1\64\13\60\1\63\11\60\65\0\1\15"+
    "\1\65\4\15\1\66\4\15\1\0\14\15\1\67\1\15"+
    "\2\0\1\15\22\0\1\15\10\0\1\70\7\0\1\71"+
    "\2\0\1\72\42\0\1\15\1\0\1\15\1\73\7\15"+
    "\1\0\5\15\1\74\10\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\7\15\1\75\1\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\1\15"+
    "\1\76\7\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\2\15\1\77\1\15\1\100\4\15"+
    "\1\0\10\15\1\101\1\15\1\102\3\15\2\0\1\15"+
    "\22\0\1\15\3\0\1\15\1\0\1\15\1\103\1\15"+
    "\1\104\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\105\1\0\6\15\1\106\2\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\11\15"+
    "\1\0\16\15\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\3\15\1\107\5\15\1\0\16\15\2\0\1\15"+
    "\22\0\1\15\3\0\1\15\1\0\1\15\1\110\7\15"+
    "\1\111\15\15\1\112\2\0\1\15\22\0\1\15\11\0"+
    "\1\113\5\0\1\114\1\0\1\115\44\0\1\116\1\0"+
    "\11\15\1\0\16\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\117\1\0\1\15\1\120\1\121\6\15\1\0\1\15"+
    "\1\122\14\15\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\6\15\1\123\2\15\1\0\16\15\2\0\1\15"+
    "\22\0\1\15\3\0\1\15\1\0\1\15\1\124\4\15"+
    "\1\125\1\126\1\15\1\0\5\15\1\127\10\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\7\15\1\130"+
    "\1\15\1\0\16\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\15\1\0\1\15\1\131\7\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\3\15\1\132"+
    "\5\15\1\0\1\15\1\133\2\15\1\134\11\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\4\15\1\135"+
    "\4\15\1\0\1\136\1\15\1\137\13\15\2\0\1\15"+
    "\22\0\1\15\36\0\1\32\63\0\1\33\32\0\1\140"+
    "\110\0\1\141\7\0\1\142\52\0\1\143\77\0\1\144"+
    "\7\0\1\145\50\0\1\146\50\0\1\64\27\0\1\15"+
    "\1\0\10\15\1\147\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\7\0\1\150\60\0\1\151\65\0\1\152\3\0"+
    "\1\153\51\0\1\15\1\0\1\15\1\154\7\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\7\15\1\155\1\15\1\0\11\15\1\156\4\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\1\15\1\157"+
    "\7\15\1\0\16\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\15\1\160\11\15\1\0\14\15\1\161\1\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\10\15\1\162"+
    "\1\0\16\15\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\11\15\1\163\15\15\1\164\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\11\15\1\0\11\15\1\165"+
    "\4\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\11\15\1\0\4\15\1\166\11\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\11\15\1\0\10\15\1\167"+
    "\5\15\2\0\1\15\22\0\1\15\3\0\1\15\1\170"+
    "\2\15\1\171\6\15\1\0\14\15\1\172\1\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\173\1\0\11\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\11\15\1\0\4\15\1\174\11\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\11\15\1\0\1\15\1\175"+
    "\14\15\2\0\1\15\22\0\1\15\17\0\1\176\46\0"+
    "\1\15\1\0\11\15\1\0\1\177\15\15\2\0\1\15"+
    "\22\0\1\15\23\0\1\200\64\0\1\201\40\0\1\15"+
    "\1\0\11\15\1\202\15\15\1\203\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\2\15\1\204\6\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\7\15\1\205\1\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\1\15\1\206\7\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\4\15\1\207\4\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\11\15\1\210\15\15\1\211"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\3\15"+
    "\1\212\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\1\15\1\213\14\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\11\15"+
    "\1\0\6\15\1\214\7\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\215\15\15\1\216\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\7\15\1\217"+
    "\1\15\1\0\16\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\15\1\0\2\15\1\220\6\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\1\221\10\15"+
    "\1\0\16\15\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\3\15\1\222\3\15\1\223\1\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\11\15"+
    "\1\0\4\15\1\224\11\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\6\15\1\225\7\15"+
    "\2\0\1\15\22\0\1\15\10\0\1\226\110\0\1\227"+
    "\13\0\1\145\20\0\1\230\77\0\1\231\53\0\1\232"+
    "\1\0\1\233\13\0\1\232\31\0\1\15\1\0\2\15"+
    "\1\234\6\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\3\15\1\235\5\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\236\1\0\11\15"+
    "\1\0\16\15\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\11\15\1\0\6\15\1\237\7\15\2\0\1\15"+
    "\22\0\1\15\10\0\1\240\55\0\1\15\1\0\3\15"+
    "\1\241\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\16\15\2\0\1\15"+
    "\12\0\1\242\7\0\1\15\23\0\1\243\42\0\1\15"+
    "\1\0\11\15\1\0\4\15\1\244\11\15\2\0\1\15"+
    "\22\0\1\15\3\0\1\15\1\0\11\15\1\0\4\15"+
    "\1\245\11\15\2\0\1\15\22\0\1\15\10\0\1\246"+
    "\55\0\1\15\1\0\2\15\1\247\6\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\3\15"+
    "\1\250\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\7\15\1\251\1\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\11\15"+
    "\1\0\1\15\1\252\14\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\1\253\10\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\10\0\1\254\63\0\1\255\54\0"+
    "\1\15\1\0\4\15\1\256\4\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\257\11\15\1\0"+
    "\14\15\1\213\1\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\260\1\0\11\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\5\15\1\261\3\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\7\0\1\262\56\0"+
    "\1\15\1\0\2\15\1\263\6\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\4\15\1\264"+
    "\4\15\1\0\16\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\15\1\0\3\15\1\265\5\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\3\0\1\15\1\0\3\15\1\266"+
    "\5\15\1\0\16\15\2\0\1\15\22\0\1\15\11\0"+
    "\1\267\16\0\1\270\35\0\1\15\1\0\4\15\1\271"+
    "\4\15\1\0\11\15\1\272\4\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\3\15\1\273\5\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\11\15\1\0\6\15\1\274\7\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\11\15\1\232\1\15\1\275"+
    "\13\15\1\276\2\0\1\15\22\0\1\15\3\0\1\15"+
    "\1\0\3\15\1\277\5\15\1\0\16\15\2\0\1\15"+
    "\22\0\1\15\23\0\1\300\75\0\1\227\36\0\1\301"+
    "\61\0\1\302\63\0\1\303\53\0\1\15\1\0\3\15"+
    "\1\304\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\2\15\1\305\13\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\2\15"+
    "\1\306\6\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\52\0\1\307\13\0\1\15\1\0\11\15\1\0\16\15"+
    "\2\0\1\15\12\0\1\307\7\0\1\15\4\0\1\310"+
    "\11\0\1\311\2\0\1\312\1\313\1\314\7\0\1\310"+
    "\1\311\15\0\1\242\31\0\1\315\30\0\1\316\13\0"+
    "\1\15\1\0\11\15\1\0\2\15\1\317\13\15\2\0"+
    "\1\15\12\0\1\316\7\0\1\15\3\0\1\15\1\0"+
    "\7\15\1\320\1\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\2\15\1\321\6\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\26\0\1\322\44\0"+
    "\1\323\55\0\1\15\1\0\11\15\1\0\4\15\1\324"+
    "\11\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\11\15\1\0\4\15\1\325\11\15\2\0\1\15\22\0"+
    "\1\15\10\0\1\326\55\0\1\15\1\0\3\15\1\327"+
    "\5\15\1\0\16\15\2\0\1\15\22\0\1\15\23\0"+
    "\1\330\42\0\1\331\62\0\1\15\1\0\11\15\1\0"+
    "\4\15\1\332\11\15\2\0\1\15\22\0\1\15\3\0"+
    "\1\333\1\0\11\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\5\15\1\334\3\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\5\15\1\335\3\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\4\15\1\336\4\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\11\15\1\0\7\15\1\337\6\15\2\0\1\15\22\0"+
    "\1\15\14\0\1\340\71\0\1\341\65\0\1\342\57\0"+
    "\1\343\42\0\1\344\1\0\11\15\1\0\16\15\2\0"+
    "\1\15\22\0\1\15\16\0\1\345\15\0\1\345\15\0"+
    "\1\307\20\0\1\346\7\0\1\347\63\0\1\350\47\0"+
    "\1\351\11\0\1\352\55\0\1\353\73\0\1\354\44\0"+
    "\1\355\57\0\1\15\1\0\1\15\1\356\7\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\3\0\1\15\1\0"+
    "\4\15\1\357\4\15\1\0\16\15\2\0\1\15\22\0"+
    "\1\15\3\0\1\15\1\0\3\15\1\360\5\15\1\0"+
    "\16\15\2\0\1\15\22\0\1\15\10\0\1\361\55\0"+
    "\1\15\1\0\11\15\1\362\15\15\1\363\2\0\1\15"+
    "\22\0\1\15\23\0\1\364\42\0\1\15\1\0\11\15"+
    "\1\0\4\15\1\365\11\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\4\15\1\366\11\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\11\15"+
    "\1\0\4\15\1\367\11\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\7\15\1\370\6\15"+
    "\2\0\1\15\22\0\1\15\3\0\1\15\1\0\3\15"+
    "\1\371\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\372\131\0\1\373\14\0\1\374\26\0\1\374"+
    "\32\0\1\15\1\0\4\15\1\375\4\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\21\0\1\376\50\0\1\377"+
    "\60\0\1\u0100\71\0\1\u0101\57\0\1\u0102\67\0\1\u0103"+
    "\15\0\1\u0103\53\0\1\u0104\51\0\1\u0105\51\0\1\15"+
    "\1\0\7\15\1\u0106\1\15\1\0\16\15\2\0\1\15"+
    "\22\0\1\15\14\0\1\u0107\54\0\1\u0108\57\0\1\15"+
    "\1\0\1\15\1\u0109\7\15\1\0\16\15\2\0\1\15"+
    "\22\0\1\15\10\0\1\u010a\55\0\1\15\1\0\3\15"+
    "\1\u010b\5\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\11\15\1\0\16\15\2\0\1\15"+
    "\12\0\1\373\7\0\1\15\3\0\1\15\1\374\11\15"+
    "\1\0\14\15\1\u010c\1\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\15\1\0\7\15\1\u010d\1\15\1\0\16\15"+
    "\2\0\1\15\22\0\1\15\41\0\1\u010e\33\0\1\u010f"+
    "\37\0\1\373\20\0\1\u0110\64\0\1\u0111\57\0\1\u0112"+
    "\63\0\1\u0113\63\0\1\u0114\54\0\1\15\1\0\4\15"+
    "\1\u0115\4\15\1\0\16\15\2\0\1\15\22\0\1\15"+
    "\3\0\1\u0116\71\0\1\u0117\73\0\1\u0118\47\0\1\u0119"+
    "\56\0\1\u011a\26\0\1\u011a\52\0\1\u011b\55\0\1\u011c"+
    "\15\0\1\u011c\36\0\1\u011d\60\0\1\u011e\65\0\1\u011f"+
    "\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10098];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\1\11\3\1\3\11\2\1\4\11"+
    "\1\1\13\11\3\1\1\11\2\1\3\0\16\1\1\0"+
    "\1\1\2\0\1\11\22\1\1\0\3\11\2\0\1\11"+
    "\1\1\1\0\1\11\2\0\4\1\1\0\2\1\1\0"+
    "\4\1\1\0\5\1\1\11\1\1\1\0\1\11\1\0"+
    "\5\1\1\0\4\1\1\0\10\1\1\0\1\1\1\0"+
    "\1\11\2\0\6\1\1\0\3\1\1\11\5\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\4\1\2\0\7\1"+
    "\4\0\3\1\10\0\3\1\1\0\1\11\2\1\1\11"+
    "\1\1\1\11\1\0\6\1\1\0\1\1\1\11\1\0"+
    "\1\1\3\0\1\11\5\0\3\1\2\0\1\1\1\0"+
    "\5\1\2\0\1\11\1\1\1\11\1\0\2\11\3\0"+
    "\1\11\1\1\1\11\1\0\1\1\1\11\3\1\1\11"+
    "\4\0\2\11\1\1\3\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
        ArrayList<Visual_Error> erroresLexicos = new ArrayList<Visual_Error>();

	String st;
	private Symbol symbol(int type) {
    	return new Symbol(type, yyline, yycolumn, yytext());
  	}
  	private Symbol symbol(int type, Object value) {
    	return new Symbol(type, yyline, yycolumn, value);
  	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
  	st = "";
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Errores lexicos:" + erroresLexicos.add(new Visual_Error( yyline +1 , yycolumn +1, "Caracter invalido en la linea " + (yyline +1) +", columna " + (yycolumn +1) + ". No se esperaba :" + yytext() )));
          }
        case 83: break;
        case 2: 
          { return symbol(sym.Id);
          }
        case 84: break;
        case 3: 
          { return symbol(sym.Asigna);
          }
        case 85: break;
        case 4: 
          { return symbol(sym.EndLine);
          }
        case 86: break;
        case 5: 
          { return symbol(sym.Entero);
          }
        case 87: break;
        case 6: 
          { return symbol(sym.LlaveDer);
          }
        case 88: break;
        case 7: 
          { return symbol(sym.LlaveIzq);
          }
        case 89: break;
        case 8: 
          { return symbol(sym.DosPuntos);
          }
        case 90: break;
        case 9: 
          { return symbol(sym.Coma);
          }
        case 91: break;
        case 10: 
          { return symbol(sym.Menor);
          }
        case 92: break;
        case 11: 
          { return symbol(sym.Mayor);
          }
        case 93: break;
        case 12: 
          { return symbol(sym.Potencia);
          }
        case 94: break;
        case 13: 
          { return symbol(sym.Concatenacion);
          }
        case 95: break;
        case 14: 
          { yybegin(str);
          }
        case 96: break;
        case 15: 
          { return symbol(sym.DiviEntera);
          }
        case 97: break;
        case 16: 
          { 
          }
        case 98: break;
        case 17: 
          { return symbol(sym.Resta);
          }
        case 99: break;
        case 18: 
          { return symbol(sym.Suma);
          }
        case 100: break;
        case 19: 
          { return symbol(sym.Mult);
          }
        case 101: break;
        case 20: 
          { return symbol(sym.Div);
          }
        case 102: break;
        case 21: 
          { return symbol(sym.ParIzq);
          }
        case 103: break;
        case 22: 
          { return symbol(sym.ParDer);
          }
        case 104: break;
        case 23: 
          { return symbol(sym.GuionBajo);
          }
        case 105: break;
        case 24: 
          { yybegin(com);
          }
        case 106: break;
        case 25: 
          { st+=yytext();
          }
        case 107: break;
        case 26: 
          { System.out.println("String: " + st);st="";yybegin(YYINITIAL); return symbol(str);
          }
        case 108: break;
        case 27: 
          { System.out.println("Comentario");yybegin(YYINITIAL);
          }
        case 109: break;
        case 28: 
          { return symbol(sym.As);
          }
        case 110: break;
        case 29: 
          { return symbol(sym.Or);
          }
        case 111: break;
        case 30: 
          { return symbol(sym.Do);
          }
        case 112: break;
        case 31: 
          { return symbol(sym.If);
          }
        case 113: break;
        case 32: 
          { return symbol(sym.To);
          }
        case 114: break;
        case 33: 
          { return symbol(sym.MenorIgual);
          }
        case 115: break;
        case 34: 
          { return symbol(sym.Distinto);
          }
        case 116: break;
        case 35: 
          { return symbol(sym.MayorIgual);
          }
        case 117: break;
        case 36: 
          { st+="\"";
          }
        case 118: break;
        case 37: 
          { return symbol(sym.And);
          }
        case 119: break;
        case 38: 
          { return symbol(sym.Sub);
          }
        case 120: break;
        case 39: 
          { return symbol(sym.End);
          }
        case 121: break;
        case 40: 
          { return symbol(sym.Eqv);
          }
        case 122: break;
        case 41: 
          { return symbol(sym.Not);
          }
        case 123: break;
        case 42: 
          { return symbol(sym.Dim);
          }
        case 124: break;
        case 43: 
          { return symbol(sym.Imp);
          }
        case 125: break;
        case 44: 
          { return symbol(sym.For);
          }
        case 126: break;
        case 45: 
          { return symbol(sym.Xor);
          }
        case 127: break;
        case 46: 
          { return symbol(sym.Step);
          }
        case 128: break;
        case 47: 
          { return symbol(sym.Loop);
          }
        case 129: break;
        case 48: 
          { return symbol(sym.Else);
          }
        case 130: break;
        case 49: 
          { return symbol(sym.Exit);
          }
        case 131: break;
        case 50: 
          { return symbol(sym.Next);
          }
        case 132: break;
        case 51: 
          { return symbol(sym.Case);
          }
        case 133: break;
        case 52: 
          { return symbol(sym.Call);
          }
        case 134: break;
        case 53: 
          { return symbol(sym.Char);
          }
        case 135: break;
        case 54: 
          { return symbol(sym.Main);
          }
        case 136: break;
        case 55: 
          { return symbol(sym.Then);
          }
        case 137: break;
        case 56: 
          { return symbol(sym.TipoBoolean);
          }
        case 138: break;
        case 57: 
          { return symbol(sym.Type);
          }
        case 139: break;
        case 58: 
          { return symbol(sym.ByRef);
          }
        case 140: break;
        case 59: 
          { return symbol(sym.ByVal);
          }
        case 141: break;
        case 60: 
          { return symbol(sym.Float);
          }
        case 142: break;
        case 61: 
          { return symbol(sym.While);
          }
        case 143: break;
        case 62: 
          { return symbol(sym.Print);
          }
        case 144: break;
        case 63: 
          { return symbol(sym.Select);
          }
        case 145: break;
        case 64: 
          { return symbol(sym.String);
          }
        case 146: break;
        case 65: 
          { return symbol(sym.EndIf);
          }
        case 147: break;
        case 66: 
          { return symbol(sym.Return);
          }
        case 148: break;
        case 67: 
          { return symbol(sym.Double);
          }
        case 149: break;
        case 68: 
          { return symbol(sym.Structs);
          }
        case 150: break;
        case 69: 
          { return symbol(sym.Boolean);
          }
        case 151: break;
        case 70: 
          { return symbol(sym.ElseIf);
          }
        case 152: break;
        case 71: 
          { return symbol(sym.EndSub);
          }
        case 153: break;
        case 72: 
          { return symbol(sym.EndFor);
          }
        case 154: break;
        case 73: 
          { return symbol(sym.ExitFor);
          }
        case 155: break;
        case 74: 
          { return symbol(sym.Integer);
          }
        case 156: break;
        case 75: 
          { return symbol(sym.Private);
          }
        case 157: break;
        case 76: 
          { return symbol(sym.Ch);
          }
        case 158: break;
        case 77: 
          { return symbol(sym.EndType);
          }
        case 159: break;
        case 78: 
          { return symbol(sym.Function);
          }
        case 160: break;
        case 79: 
          { return symbol(sym.EndWhile);
          }
        case 161: break;
        case 80: 
          { return symbol(sym.EndSelect);
          }
        case 162: break;
        case 81: 
          { return symbol(sym.SelectCase);
          }
        case 163: break;
        case 82: 
          { return symbol(sym.EndFunction);
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
