
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 22 19:21:32 CST 2014
//----------------------------------------------------

package compiladores;

import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 22 19:21:32 CST 2014
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\002\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\006" +
    "\000\002\002\006\000\002\002\004\000\002\002\003\000" +
    "\002\010\003\000\002\014\004\000\002\014\003\000\002" +
    "\044\006\000\002\040\005\000\002\040\004\000\002\007" +
    "\007\000\002\007\003\000\002\007\003\000\002\016\005" +
    "\000\002\020\003\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\017\007\000\002\045\007\000\002" +
    "\046\016\000\002\021\005\000\002\021\010\000\002\021" +
    "\002\000\002\047\004\000\002\047\003\000\002\003\004" +
    "\000\002\003\005\000\002\003\007\000\002\051\005\000" +
    "\002\051\002\000\002\052\005\000\002\052\005\000\002" +
    "\005\003\000\002\005\005\000\002\023\003\000\002\023" +
    "\004\000\002\043\004\000\002\043\002\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\041\006\000\002\004" +
    "\005\000\002\033\007\000\002\025\006\000\002\027\003" +
    "\000\002\027\003\000\002\027\002\000\002\026\005\000" +
    "\002\030\010\000\002\034\015\000\002\035\011\000\002" +
    "\035\011\000\002\042\003\000\002\042\002\000\002\013" +
    "\012\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\011\005\000\002\011\003\000" +
    "\002\011\002\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\031\005\000\002\032\003\000\002\032\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\050" +
    "\003\000\002\050\006\000\002\050\010\000\002\050\010" +
    "\000\002\050\010\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\007\000\002" +
    "\050\007\000\002\050\007\000\002\050\003\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\036\003" +
    "\000\002\036\003\000\002\036\006\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\016\002\000\003\005\023\007\047\uffd6\073" +
    "\uffd6\122\uffd6\001\002\000\004\002\367\001\002\000\004" +
    "\002\ufff9\001\002\000\012\023\007\047\uffd6\073\uffd6\122" +
    "\uffd6\001\002\000\006\003\355\115\223\001\002\000\010" +
    "\047\013\073\011\122\012\001\002\000\006\024\346\115" +
    "\024\001\002\000\004\115\323\001\002\000\004\115\306" +
    "\001\002\000\012\003\302\047\013\073\011\122\012\001" +
    "\002\000\014\002\ufff0\003\ufff0\047\ufff0\073\ufff0\122\ufff0" +
    "\001\002\000\014\002\ufff1\003\ufff1\047\ufff1\073\ufff1\122" +
    "\ufff1\001\002\000\014\002\ufff6\003\ufff6\047\ufff6\073\ufff6" +
    "\122\ufff6\001\002\000\012\002\ufffa\047\013\073\021\122" +
    "\012\001\002\000\004\115\024\001\002\000\012\002\ufffd" +
    "\047\013\073\021\122\012\001\002\000\014\002\ufff7\003" +
    "\ufff7\047\ufff7\073\ufff7\122\ufff7\001\002\000\004\100\165" +
    "\001\002\000\022\023\007\054\044\055\051\057\027\074" +
    "\037\102\047\115\046\117\030\001\002\000\042\012\uffd2" +
    "\023\uffd2\054\uffd2\055\uffd2\057\uffd2\062\uffd2\063\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\071\uffd2\072\uffd2\074\uffd2\102\uffd2" +
    "\115\uffd2\117\uffd2\001\002\000\004\115\270\001\002\000" +
    "\004\115\024\001\002\000\042\012\uffd9\023\007\054\044" +
    "\055\051\057\027\062\uffd9\063\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\071\uffd9\072\uffd9\074\037\102\047\115\046\117\030" +
    "\001\002\000\042\012\uffcd\023\uffcd\054\uffcd\055\uffcd\057" +
    "\uffcd\062\uffcd\063\uffcd\065\uffcd\066\uffcd\067\uffcd\071\uffcd" +
    "\072\uffcd\074\uffcd\102\uffcd\115\uffcd\117\uffcd\001\002\000" +
    "\004\066\264\001\002\000\042\012\uffce\023\uffce\054\uffce" +
    "\055\uffce\057\uffce\062\uffce\063\uffce\065\uffce\066\uffce\067" +
    "\uffce\071\uffce\072\uffce\074\uffce\102\uffce\115\uffce\117\uffce" +
    "\001\002\000\042\012\uffd5\023\uffd5\054\uffd5\055\uffd5\057" +
    "\uffd5\062\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5" +
    "\072\uffd5\074\uffd5\102\uffd5\115\uffd5\117\uffd5\001\002\000" +
    "\010\012\ufff8\066\ufff8\067\ufff8\001\002\000\010\050\256" +
    "\051\257\115\254\001\002\000\042\012\uffd1\023\uffd1\054" +
    "\uffd1\055\uffd1\057\uffd1\062\uffd1\063\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\071\uffd1\072\uffd1\074\uffd1\102\uffd1\115\uffd1\117" +
    "\uffd1\001\002\000\042\012\uffe3\023\uffe3\054\uffe3\055\uffe3" +
    "\057\uffe3\062\uffe3\063\uffe3\065\uffe3\066\uffe3\067\uffe3\071" +
    "\uffe3\072\uffe3\074\uffe3\102\uffe3\115\uffe3\117\uffe3\001\002" +
    "\000\042\012\uffd0\023\uffd0\054\uffd0\055\uffd0\057\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\072\uffd0" +
    "\074\uffd0\102\uffd0\115\uffd0\117\uffd0\001\002\000\042\012" +
    "\uffd4\023\uffd4\054\uffd4\055\uffd4\057\uffd4\062\uffd4\063\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\071\uffd4\072\uffd4\074\uffd4\102" +
    "\uffd4\115\uffd4\117\uffd4\001\002\000\022\003\064\046\061" +
    "\050\054\051\062\100\067\110\060\115\057\121\053\001" +
    "\002\000\042\012\uffd3\023\uffd3\054\uffd3\055\uffd3\057\uffd3" +
    "\062\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072" +
    "\uffd3\074\uffd3\102\uffd3\115\uffd3\117\uffd3\001\002\000\010" +
    "\075\166\100\165\120\167\001\002\000\004\100\161\001" +
    "\002\000\022\023\007\054\044\055\051\057\027\074\037" +
    "\102\047\115\046\117\030\001\002\000\024\003\064\046" +
    "\061\050\054\051\062\056\055\100\067\110\060\115\057" +
    "\121\053\001\002\000\042\012\uffcf\023\uffcf\054\uffcf\055" +
    "\uffcf\057\uffcf\062\uffcf\063\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\071\uffcf\072\uffcf\074\uffcf\102\uffcf\115\uffcf\117\uffcf\001" +
    "\002\000\056\023\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0" +
    "\067\uffb0\074\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0" +
    "\115\uffb0\116\uffb0\117\uffb0\120\uffb0\001\002\000\056\023" +
    "\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\067\uffaf\074\uffaf" +
    "\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107" +
    "\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\001\002\000\022\003\064\046\061\050" +
    "\054\051\062\100\067\110\060\115\057\121\053\001\002" +
    "\000\056\023\uffab\054\uffab\055\uffab\057\uffab\060\uffab\067" +
    "\uffab\074\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\107\uffab\111\uffab\112\uffab\113\uffab\114\uffab\115" +
    "\uffab\116\uffab\117\uffab\120\uffab\001\002\000\052\023\uffac" +
    "\054\uffac\055\uffac\057\uffac\060\uffac\074\uffac\101\uffac\102" +
    "\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\111\uffac" +
    "\112\uffac\113\uffac\114\uffac\115\uffac\117\uffac\120\uffac\001" +
    "\002\000\004\100\124\001\002\000\056\023\uffb1\054\uffb1" +
    "\055\uffb1\057\uffb1\060\uffb1\067\uffb1\074\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\111\uffb1" +
    "\112\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\001\002\000\056\023\uffae\054\uffae\055\uffae\057\uffae" +
    "\060\uffae\067\uffae\074\uffae\101\uffae\102\uffae\103\uffae\104" +
    "\uffae\105\uffae\106\uffae\107\uffae\111\uffae\112\uffae\113\uffae" +
    "\114\uffae\115\uffae\116\uffae\117\uffae\120\uffae\001\002\000" +
    "\036\023\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\074\uffa4" +
    "\101\uffa4\102\uffa4\111\116\112\120\113\117\114\uffa4\115" +
    "\uffa4\117\uffa4\001\002\000\030\023\uff98\054\uff98\055\uff98" +
    "\057\uff98\060\uff98\074\uff98\101\uff98\102\uff98\114\uff98\115" +
    "\uff98\117\uff98\001\002\000\024\023\uffbf\054\uffbf\055\uffbf" +
    "\057\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf\117\uffbf\001" +
    "\002\000\016\103\101\104\102\105\100\106\106\107\103" +
    "\120\105\001\002\000\022\003\064\046\061\050\054\051" +
    "\062\100\067\110\060\115\057\121\053\001\002\000\004" +
    "\101\071\001\002\000\036\023\uff9c\054\uff9c\055\uff9c\057" +
    "\uff9c\060\uff9c\074\uff9c\101\uff9c\102\uff9c\111\072\112\074" +
    "\113\073\114\uff9c\115\uff9c\117\uff9c\001\002\000\022\003" +
    "\064\046\061\050\054\051\062\100\067\110\060\115\057" +
    "\121\053\001\002\000\022\003\064\046\061\050\054\051" +
    "\062\100\067\110\060\115\057\121\053\001\002\000\022" +
    "\003\064\046\061\050\054\051\062\100\067\110\060\115" +
    "\057\121\053\001\002\000\030\023\uff9b\054\uff9b\055\uff9b" +
    "\057\uff9b\060\uff9b\074\uff9b\101\uff9b\102\uff9b\114\uff9b\115" +
    "\uff9b\117\uff9b\001\002\000\030\023\uff9a\054\uff9a\055\uff9a" +
    "\057\uff9a\060\uff9a\074\uff9a\101\uff9a\102\uff9a\114\uff9a\115" +
    "\uff9a\117\uff9a\001\002\000\030\023\uff99\054\uff99\055\uff99" +
    "\057\uff99\060\uff99\074\uff99\101\uff99\102\uff99\114\uff99\115" +
    "\uff99\117\uff99\001\002\000\014\046\uffa6\050\uffa6\051\uffa6" +
    "\115\uffa6\121\uffa6\001\002\000\014\046\uffa9\050\uffa9\051" +
    "\uffa9\115\uffa9\121\uffa9\001\002\000\014\046\uffaa\050\uffaa" +
    "\051\uffaa\115\uffaa\121\uffaa\001\002\000\014\046\uffa8\050" +
    "\uffa8\051\uffa8\115\uffa8\121\uffa8\001\002\000\014\046\061" +
    "\050\054\051\062\115\057\121\053\001\002\000\014\046" +
    "\uffa5\050\uffa5\051\uffa5\115\uffa5\121\uffa5\001\002\000\014" +
    "\046\uffa7\050\uffa7\051\uffa7\115\uffa7\121\uffa7\001\002\000" +
    "\036\023\uffad\054\uffad\055\uffad\057\uffad\060\uffad\074\uffad" +
    "\101\uffad\102\uffad\111\uffad\112\uffad\113\uffad\114\uffad\115" +
    "\uffad\117\uffad\001\002\000\054\002\uffc0\003\uffc0\012\uffc0" +
    "\023\uffc0\047\uffc0\054\uffc0\055\uffc0\057\uffc0\062\uffc0\063" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\102\uffc0\115\uffc0\117\uffc0\122\uffc0\001\002\000" +
    "\022\023\007\054\044\055\051\057\027\074\037\102\047" +
    "\115\046\117\030\001\002\000\004\071\113\001\002\000" +
    "\004\056\114\001\002\000\044\012\uffbf\023\uffbf\054\uffbf" +
    "\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf" +
    "\117\uffbf\001\002\000\042\012\uffc1\023\uffc1\054\uffc1\055" +
    "\uffc1\057\uffc1\062\uffc1\063\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\071\uffc1\072\uffc1\074\uffc1\102\uffc1\115\uffc1\117\uffc1\001" +
    "\002\000\022\003\064\046\061\050\054\051\062\100\067" +
    "\110\060\115\057\121\053\001\002\000\022\003\064\046" +
    "\061\050\054\051\062\100\067\110\060\115\057\121\053" +
    "\001\002\000\022\003\064\046\061\050\054\051\062\100" +
    "\067\110\060\115\057\121\053\001\002\000\030\023\uff9f" +
    "\054\uff9f\055\uff9f\057\uff9f\060\uff9f\074\uff9f\101\uff9f\102" +
    "\uff9f\114\uff9f\115\uff9f\117\uff9f\001\002\000\030\023\uff9e" +
    "\054\uff9e\055\uff9e\057\uff9e\060\uff9e\074\uff9e\101\uff9e\102" +
    "\uff9e\114\uff9e\115\uff9e\117\uff9e\001\002\000\030\023\uff9d" +
    "\054\uff9d\055\uff9d\057\uff9d\060\uff9d\074\uff9d\101\uff9d\102" +
    "\uff9d\114\uff9d\115\uff9d\117\uff9d\001\002\000\022\003\064" +
    "\046\061\050\054\051\062\100\067\110\060\115\057\121" +
    "\053\001\002\000\004\101\126\001\002\000\036\023\uffa3" +
    "\054\uffa3\055\uffa3\057\uffa3\060\uffa3\074\uffa3\101\uffa3\102" +
    "\uffa3\111\127\112\131\113\130\114\uffa3\115\uffa3\117\uffa3" +
    "\001\002\000\022\003\064\046\061\050\054\051\062\100" +
    "\067\110\060\115\057\121\053\001\002\000\022\003\064" +
    "\046\061\050\054\051\062\100\067\110\060\115\057\121" +
    "\053\001\002\000\022\003\064\046\061\050\054\051\062" +
    "\100\067\110\060\115\057\121\053\001\002\000\030\023" +
    "\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\074\uffa2\101\uffa2" +
    "\102\uffa2\114\uffa2\115\uffa2\117\uffa2\001\002\000\030\023" +
    "\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\074\uffa1\101\uffa1" +
    "\102\uffa1\114\uffa1\115\uffa1\117\uffa1\001\002\000\030\023" +
    "\uffa0\054\uffa0\055\uffa0\057\uffa0\060\uffa0\074\uffa0\101\uffa0" +
    "\102\uffa0\114\uffa0\115\uffa0\117\uffa0\001\002\000\024\023" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\074\uffbf\102\uffbf\114\110" +
    "\115\uffbf\117\uffbf\001\002\000\022\023\007\054\044\055" +
    "\051\057\027\074\037\102\047\115\046\117\030\001\002" +
    "\000\004\071\140\001\002\000\044\012\uffbf\023\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110\115" +
    "\uffbf\117\uffbf\001\002\000\042\012\uffc2\023\uffc2\054\uffc2" +
    "\055\uffc2\057\uffc2\062\uffc2\063\uffc2\065\uffc2\066\uffc2\067" +
    "\uffc2\071\uffc2\072\uffc2\074\uffc2\102\uffc2\115\uffc2\117\uffc2" +
    "\001\002\000\010\062\145\063\144\065\uffc6\001\002\000" +
    "\004\065\uffc7\001\002\000\022\003\064\046\061\050\054" +
    "\051\062\100\067\110\060\115\057\121\053\001\002\000" +
    "\024\023\uffbf\054\uffbf\055\uffbf\057\uffbf\074\uffbf\102\uffbf" +
    "\114\110\115\uffbf\117\uffbf\001\002\000\004\065\150\001" +
    "\002\000\004\065\uffc8\001\002\000\044\012\uffbf\023\uffbf" +
    "\054\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110" +
    "\115\uffbf\117\uffbf\001\002\000\042\012\uffca\023\uffca\054" +
    "\uffca\055\uffca\057\uffca\062\uffca\063\uffca\065\uffca\066\uffca" +
    "\067\uffca\071\uffca\072\uffca\074\uffca\102\uffca\115\uffca\117" +
    "\uffca\001\002\000\022\023\007\054\044\055\051\057\027" +
    "\074\037\102\047\115\046\117\030\001\002\000\004\065" +
    "\uffc5\001\002\000\004\060\155\001\002\000\024\023\uffbf" +
    "\054\uffbf\055\uffbf\057\uffbf\074\uffbf\102\uffbf\114\110\115" +
    "\uffbf\117\uffbf\001\002\000\022\023\007\054\044\055\051" +
    "\057\027\074\037\102\047\115\046\117\030\001\002\000" +
    "\010\062\145\063\144\065\uffc6\001\002\000\004\065\uffc4" +
    "\001\002\000\004\115\162\001\002\000\004\101\163\001" +
    "\002\000\044\012\uffbf\023\uffbf\054\uffbf\055\uffbf\057\uffbf" +
    "\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067\uffbf\071\uffbf\072" +
    "\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf\117\uffbf\001\002" +
    "\000\042\012\uffea\023\uffea\054\uffea\055\uffea\057\uffea\062" +
    "\uffea\063\uffea\065\uffea\066\uffea\067\uffea\071\uffea\072\uffea" +
    "\074\uffea\102\uffea\115\uffea\117\uffea\001\002\000\024\025" +
    "\221\026\222\046\061\050\054\051\062\101\uffb7\115\216" +
    "\116\uffb7\121\053\001\002\000\004\115\244\001\002\000" +
    "\014\046\175\051\173\100\170\115\171\121\172\001\002" +
    "\000\010\046\175\100\170\115\171\001\002\000\062\004" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\023\uff93" +
    "\054\uff93\055\uff93\057\uff93\062\uff93\063\uff93\065\uff93\066" +
    "\uff93\067\uff93\071\uff93\072\uff93\074\uff93\100\213\101\uff93" +
    "\102\uff93\114\uff93\115\uff93\117\uff93\001\002\000\044\012" +
    "\uffbf\023\uffbf\054\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\071\uffbf\072\uffbf\074\uffbf\102" +
    "\uffbf\114\110\115\uffbf\117\uffbf\001\002\000\044\012\uffbf" +
    "\023\uffbf\054\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf" +
    "\114\110\115\uffbf\117\uffbf\001\002\000\056\004\201\006" +
    "\202\007\177\010\176\011\200\012\uffbf\023\uffbf\054\uffbf" +
    "\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf" +
    "\117\uffbf\001\002\000\060\004\uff94\006\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\023\uff94\054\uff94\055\uff94\057\uff94" +
    "\062\uff94\063\uff94\065\uff94\066\uff94\067\uff94\071\uff94\072" +
    "\uff94\074\uff94\101\uff94\102\uff94\114\uff94\115\uff94\117\uff94" +
    "\001\002\000\010\046\175\100\170\115\171\001\002\000" +
    "\010\046\175\100\170\115\171\001\002\000\010\046\175" +
    "\100\170\115\171\001\002\000\010\046\175\100\170\115" +
    "\171\001\002\000\010\046\175\100\170\115\171\001\002" +
    "\000\042\012\uff97\023\uff97\054\uff97\055\uff97\057\uff97\062" +
    "\uff97\063\uff97\065\uff97\066\uff97\067\uff97\071\uff97\072\uff97" +
    "\074\uff97\102\uff97\115\uff97\117\uff97\001\002\000\060\004" +
    "\201\006\uff91\007\uff91\010\176\011\200\012\uff91\023\uff91" +
    "\054\uff91\055\uff91\057\uff91\062\uff91\063\uff91\065\uff91\066" +
    "\uff91\067\uff91\071\uff91\072\uff91\074\uff91\101\uff91\102\uff91" +
    "\114\uff91\115\uff91\117\uff91\001\002\000\060\004\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\023\uff8d\054\uff8d" +
    "\055\uff8d\057\uff8d\062\uff8d\063\uff8d\065\uff8d\066\uff8d\067" +
    "\uff8d\071\uff8d\072\uff8d\074\uff8d\101\uff8d\102\uff8d\114\uff8d" +
    "\115\uff8d\117\uff8d\001\002\000\060\004\201\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\023\uff8e\054\uff8e\055\uff8e" +
    "\057\uff8e\062\uff8e\063\uff8e\065\uff8e\066\uff8e\067\uff8e\071" +
    "\uff8e\072\uff8e\074\uff8e\101\uff8e\102\uff8e\114\uff8e\115\uff8e" +
    "\117\uff8e\001\002\000\060\004\201\006\uff90\007\uff90\010" +
    "\176\011\200\012\uff90\023\uff90\054\uff90\055\uff90\057\uff90" +
    "\062\uff90\063\uff90\065\uff90\066\uff90\067\uff90\071\uff90\072" +
    "\uff90\074\uff90\101\uff90\102\uff90\114\uff90\115\uff90\117\uff90" +
    "\001\002\000\060\004\201\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\023\uff8f\054\uff8f\055\uff8f\057\uff8f\062\uff8f" +
    "\063\uff8f\065\uff8f\066\uff8f\067\uff8f\071\uff8f\072\uff8f\074" +
    "\uff8f\101\uff8f\102\uff8f\114\uff8f\115\uff8f\117\uff8f\001\002" +
    "\000\042\012\uff95\023\uff95\054\uff95\055\uff95\057\uff95\062" +
    "\uff95\063\uff95\065\uff95\066\uff95\067\uff95\071\uff95\072\uff95" +
    "\074\uff95\102\uff95\115\uff95\117\uff95\001\002\000\042\012" +
    "\uff96\023\uff96\054\uff96\055\uff96\057\uff96\062\uff96\063\uff96" +
    "\065\uff96\066\uff96\067\uff96\071\uff96\072\uff96\074\uff96\102" +
    "\uff96\115\uff96\117\uff96\001\002\000\024\025\221\026\222" +
    "\046\061\050\054\051\062\101\uffb7\115\216\116\uffb7\121" +
    "\053\001\002\000\006\101\uffb4\116\uffb4\001\002\000\006" +
    "\101\241\116\236\001\002\000\012\022\225\100\234\101" +
    "\uffac\116\uffac\001\002\000\006\101\uffb8\116\uffb8\001\002" +
    "\000\006\101\uffb3\116\uffb3\001\002\000\004\115\223\001" +
    "\002\000\004\115\223\001\002\000\004\022\225\001\002" +
    "\000\006\101\uffb5\116\uffb5\001\002\000\012\042\227\043" +
    "\226\044\230\045\232\001\002\000\060\012\uffbc\023\uffbc" +
    "\047\uffbc\054\uffbc\055\uffbc\057\uffbc\062\uffbc\063\uffbc\065" +
    "\uffbc\066\uffbc\067\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\101\uffbc\102\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc\120" +
    "\uffbc\122\uffbc\001\002\000\060\012\uffbd\023\uffbd\047\uffbd" +
    "\054\uffbd\055\uffbd\057\uffbd\062\uffbd\063\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\101\uffbd" +
    "\102\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\122" +
    "\uffbd\001\002\000\060\012\uffbb\023\uffbb\047\uffbb\054\uffbb" +
    "\055\uffbb\057\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\101\uffbb\102\uffbb" +
    "\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\122\uffbb\001" +
    "\002\000\060\012\uffcb\023\uffcb\047\uffcb\054\uffcb\055\uffcb" +
    "\057\uffcb\062\uffcb\063\uffcb\065\uffcb\066\uffcb\067\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\101\uffcb\102\uffcb\114\uffcb" +
    "\115\uffcb\116\uffcb\117\uffcb\120\uffcb\122\uffcb\001\002\000" +
    "\060\012\uffba\023\uffba\047\uffba\054\uffba\055\uffba\057\uffba" +
    "\062\uffba\063\uffba\065\uffba\066\uffba\067\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\101\uffba\102\uffba\114\uffba\115\uffba" +
    "\116\uffba\117\uffba\120\uffba\122\uffba\001\002\000\006\101" +
    "\uffb6\116\uffb6\001\002\000\024\025\221\026\222\046\061" +
    "\050\054\051\062\101\uffb7\115\216\116\uffb7\121\053\001" +
    "\002\000\006\101\237\116\236\001\002\000\020\025\221" +
    "\026\222\046\061\050\054\051\062\115\216\121\053\001" +
    "\002\000\006\101\uffb2\116\uffb2\001\002\000\006\101\uffb9" +
    "\116\uffb9\001\002\000\060\004\uff92\006\uff92\007\uff92\010" +
    "\uff92\011\uff92\012\uff92\023\uff92\054\uff92\055\uff92\057\uff92" +
    "\062\uff92\063\uff92\065\uff92\066\uff92\067\uff92\071\uff92\072" +
    "\uff92\074\uff92\101\uff92\102\uff92\114\uff92\115\uff92\117\uff92" +
    "\001\002\000\016\004\201\006\202\007\177\010\176\011" +
    "\200\101\243\001\002\000\060\004\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\023\uff8c\054\uff8c\055\uff8c\057" +
    "\uff8c\062\uff8c\063\uff8c\065\uff8c\066\uff8c\067\uff8c\071\uff8c" +
    "\072\uff8c\074\uff8c\101\uff8c\102\uff8c\114\uff8c\115\uff8c\117" +
    "\uff8c\001\002\000\044\012\uffbf\023\uffbf\054\uffbf\055\uffbf" +
    "\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067\uffbf\071" +
    "\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf\117\uffbf" +
    "\001\002\000\042\012\uffcc\023\uffcc\054\uffcc\055\uffcc\057" +
    "\uffcc\062\uffcc\063\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc" +
    "\072\uffcc\074\uffcc\102\uffcc\115\uffcc\117\uffcc\001\002\000" +
    "\006\101\247\116\236\001\002\000\004\114\250\001\002" +
    "\000\042\012\uffe9\023\uffe9\054\uffe9\055\uffe9\057\uffe9\062" +
    "\uffe9\063\uffe9\065\uffe9\066\uffe9\067\uffe9\071\uffe9\072\uffe9" +
    "\074\uffe9\102\uffe9\115\uffe9\117\uffe9\001\002\000\004\060" +
    "\252\001\002\000\024\023\uffbf\054\uffbf\055\uffbf\057\uffbf" +
    "\074\uffbf\102\uffbf\114\110\115\uffbf\117\uffbf\001\002\000" +
    "\022\023\uffc9\054\uffc9\055\uffc9\057\uffc9\074\uffc9\102\uffc9" +
    "\115\uffc9\117\uffc9\001\002\000\046\012\uffee\023\uffee\054" +
    "\uffee\055\uffee\057\uffee\062\uffee\063\uffee\065\uffee\066\uffee" +
    "\067\uffee\071\uffee\072\uffee\074\uffee\100\261\102\uffee\114" +
    "\uffee\115\uffee\117\uffee\001\002\000\044\012\uffbf\023\uffbf" +
    "\054\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\071\uffbf\072\uffbf\074\uffbf\102\uffbf\114\110" +
    "\115\uffbf\117\uffbf\001\002\000\044\012\uffeb\023\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\062\uffeb\063\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\071\uffeb\072\uffeb\074\uffeb\102\uffeb\114\uffeb\115" +
    "\uffeb\117\uffeb\001\002\000\044\012\uffec\023\uffec\054\uffec" +
    "\055\uffec\057\uffec\062\uffec\063\uffec\065\uffec\066\uffec\067" +
    "\uffec\071\uffec\072\uffec\074\uffec\102\uffec\114\uffec\115\uffec" +
    "\117\uffec\001\002\000\042\012\uffef\023\uffef\054\uffef\055" +
    "\uffef\057\uffef\062\uffef\063\uffef\065\uffef\066\uffef\067\uffef" +
    "\071\uffef\072\uffef\074\uffef\102\uffef\115\uffef\117\uffef\001" +
    "\002\000\024\025\221\026\222\046\061\050\054\051\062" +
    "\101\uffb7\115\216\116\uffb7\121\053\001\002\000\006\101" +
    "\263\116\236\001\002\000\044\012\uffed\023\uffed\054\uffed" +
    "\055\uffed\057\uffed\062\uffed\063\uffed\065\uffed\066\uffed\067" +
    "\uffed\071\uffed\072\uffed\074\uffed\102\uffed\114\uffed\115\uffed" +
    "\117\uffed\001\002\000\016\002\uffbf\003\uffbf\047\uffbf\073" +
    "\uffbf\114\110\122\uffbf\001\002\000\014\002\ufff2\003\ufff2" +
    "\047\ufff2\073\ufff2\122\ufff2\001\002\000\022\012\uffd8\062" +
    "\uffd8\063\uffd8\065\uffd8\066\uffd8\067\uffd8\071\uffd8\072\uffd8" +
    "\001\002\000\042\012\uffe4\023\uffe4\054\uffe4\055\uffe4\057" +
    "\uffe4\062\uffe4\063\uffe4\065\uffe4\066\uffe4\067\uffe4\071\uffe4" +
    "\072\uffe4\074\uffe4\102\uffe4\115\uffe4\117\uffe4\001\002\000" +
    "\004\120\271\001\002\000\004\046\272\001\002\000\004" +
    "\061\273\001\002\000\004\046\274\001\002\000\024\023" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\074\uffbf\102\uffbf\114\110" +
    "\115\uffbf\117\uffbf\001\002\000\022\023\007\054\044\055" +
    "\051\057\027\074\037\102\047\115\046\117\030\001\002" +
    "\000\004\072\277\001\002\000\004\115\300\001\002\000" +
    "\044\012\uffbf\023\uffbf\054\uffbf\055\uffbf\057\uffbf\062\uffbf" +
    "\063\uffbf\065\uffbf\066\uffbf\067\uffbf\071\uffbf\072\uffbf\074" +
    "\uffbf\102\uffbf\114\110\115\uffbf\117\uffbf\001\002\000\042" +
    "\012\uffc3\023\uffc3\054\uffc3\055\uffc3\057\uffc3\062\uffc3\063" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3\072\uffc3\074\uffc3" +
    "\102\uffc3\115\uffc3\117\uffc3\001\002\000\012\002\ufffe\047" +
    "\013\073\021\122\012\001\002\000\012\002\uffff\047\013" +
    "\073\021\122\012\001\002\000\012\002\ufffc\047\013\073" +
    "\021\122\012\001\002\000\012\002\ufffb\047\013\073\021" +
    "\122\012\001\002\000\004\114\307\001\002\000\006\070" +
    "\uffde\115\311\001\002\000\004\114\321\001\002\000\004" +
    "\022\316\001\002\000\014\002\ufff5\003\ufff5\047\ufff5\073" +
    "\ufff5\122\ufff5\001\002\000\004\070\314\001\002\000\016" +
    "\002\ufff3\003\ufff3\047\ufff3\073\ufff3\114\315\122\ufff3\001" +
    "\002\000\014\002\ufff4\003\ufff4\047\ufff4\073\ufff4\122\ufff4" +
    "\001\002\000\014\042\227\043\226\044\230\045\232\115" +
    "\317\001\002\000\004\114\uffdc\001\002\000\004\114\uffdd" +
    "\001\002\000\006\070\uffde\115\311\001\002\000\004\070" +
    "\uffdf\001\002\000\004\100\324\001\002\000\024\025\221" +
    "\026\222\046\061\050\054\051\062\101\uffb7\115\216\116" +
    "\uffb7\121\053\001\002\000\006\101\326\116\236\001\002" +
    "\000\004\022\327\001\002\000\012\042\227\043\226\044" +
    "\230\045\232\001\002\000\004\114\331\001\002\000\022" +
    "\023\007\054\044\055\051\057\027\074\037\102\047\115" +
    "\046\117\030\001\002\000\006\012\333\067\uffe5\001\002" +
    "\000\014\046\061\050\054\051\062\115\337\121\053\001" +
    "\002\000\004\067\335\001\002\000\016\002\uffbf\003\uffbf" +
    "\047\uffbf\073\uffbf\114\110\122\uffbf\001\002\000\014\002" +
    "\uffe8\003\uffe8\047\uffe8\073\uffe8\122\uffe8\001\002\000\010" +
    "\067\uffac\100\342\114\uffac\001\002\000\006\067\uffbf\114" +
    "\110\001\002\000\004\067\uffe7\001\002\000\024\025\221" +
    "\026\222\046\061\050\054\051\062\101\uffb7\115\216\116" +
    "\uffb7\121\053\001\002\000\006\101\344\116\236\001\002" +
    "\000\006\067\uffbf\114\110\001\002\000\004\067\uffe6\001" +
    "\002\000\004\100\347\001\002\000\004\101\350\001\002" +
    "\000\024\023\uffbf\054\uffbf\055\uffbf\057\uffbf\074\uffbf\102" +
    "\uffbf\114\110\115\uffbf\117\uffbf\001\002\000\022\023\007" +
    "\054\044\055\051\057\027\074\037\102\047\115\046\117" +
    "\030\001\002\000\004\066\353\001\002\000\014\002\uffbf" +
    "\047\uffbf\073\uffbf\114\110\122\uffbf\001\002\000\012\002" +
    "\uffbe\047\uffbe\073\uffbe\122\uffbe\001\002\000\050\012\uffe2" +
    "\023\uffe2\047\uffe2\054\uffe2\055\uffe2\057\uffe2\062\uffe2\063" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\102\uffe2\115\uffe2\117\uffe2\122\uffe2\001\002\000" +
    "\056\012\uffbf\023\uffbf\047\uffbf\054\uffbf\055\uffbf\057\uffbf" +
    "\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\102\uffbf\114\110\115\uffbf\116\360" +
    "\117\uffbf\120\362\122\uffbf\001\002\000\056\012\uffdb\023" +
    "\uffdb\047\uffdb\054\uffdb\055\uffdb\057\uffdb\062\uffdb\063\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\102\uffdb\114\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb" +
    "\122\uffdb\001\002\000\004\115\223\001\002\000\050\012" +
    "\uffe1\023\uffe1\047\uffe1\054\uffe1\055\uffe1\057\uffe1\062\uffe1" +
    "\063\uffe1\065\uffe1\066\uffe1\067\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\102\uffe1\115\uffe1\117\uffe1\122\uffe1\001\002" +
    "\000\004\046\363\001\002\000\052\012\uffbf\023\uffbf\047" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\102" +
    "\uffbf\114\110\115\uffbf\117\uffbf\122\uffbf\001\002\000\050" +
    "\012\uffe0\023\uffe0\047\uffe0\054\uffe0\055\uffe0\057\uffe0\062" +
    "\uffe0\063\uffe0\065\uffe0\066\uffe0\067\uffe0\071\uffe0\072\uffe0" +
    "\073\uffe0\074\uffe0\102\uffe0\115\uffe0\117\uffe0\122\uffe0\001" +
    "\002\000\056\012\uffda\023\uffda\047\uffda\054\uffda\055\uffda" +
    "\057\uffda\062\uffda\063\uffda\065\uffda\066\uffda\067\uffda\071" +
    "\uffda\072\uffda\073\uffda\074\uffda\102\uffda\114\uffda\115\uffda" +
    "\116\uffda\117\uffda\120\uffda\122\uffda\001\002\000\010\047" +
    "\uffd7\073\uffd7\122\uffd7\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\010\002\003\003\005\043\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\005\043\365" +
    "\001\001\000\006\004\356\005\355\001\001\000\014\007" +
    "\016\013\017\014\013\044\014\046\015\001\001\000\004" +
    "\045\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\022\013\302\044\014\046\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\016\014\021\044\014\046\015\001\001\000\004\045\024" +
    "\001\001\000\010\007\022\044\014\046\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\034\010\032" +
    "\016\041\017\051\023\035\024\030\025\047\033\042\034" +
    "\044\035\025\037\033\041\037\045\040\047\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\266\001" +
    "\001\000\034\003\034\016\041\017\051\023\265\024\030" +
    "\025\047\033\042\034\044\035\025\037\033\041\037\045" +
    "\040\047\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\055\031" +
    "\062\032\065\050\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\034\016\041\017" +
    "\051\023\141\024\030\025\047\033\042\034\044\035\025" +
    "\037\033\041\037\045\040\047\031\001\001\000\012\022" +
    "\055\031\062\032\065\050\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\055\031" +
    "\062\032\065\050\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\110" +
    "\001\001\000\004\015\103\001\001\000\012\022\055\031" +
    "\062\032\065\050\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\055\031\062\032\065\050\076\001" +
    "\001\000\012\022\055\031\062\032\065\050\075\001\001" +
    "\000\012\022\055\031\062\032\065\050\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\055\032\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\034\016\041\017\051\023\111\024\030\025\047" +
    "\033\042\034\044\035\025\037\033\041\037\045\040\047" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\114\001\001\000\002\001\001\000\012\022\055\031" +
    "\062\032\065\050\122\001\001\000\012\022\055\031\062" +
    "\032\065\050\121\001\001\000\012\022\055\031\062\032" +
    "\065\050\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\055\031\062\032\065\050" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\055\031\062\032\065\050\133\001\001\000\012\022" +
    "\055\031\062\032\065\050\132\001\001\000\012\022\055" +
    "\031\062\032\065\050\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\135\001\001" +
    "\000\034\003\034\016\041\017\051\023\136\024\030\025" +
    "\047\033\042\034\044\035\025\037\033\041\037\045\040" +
    "\047\031\001\001\000\002\001\001\000\004\042\140\001" +
    "\001\000\002\001\001\000\010\026\146\027\145\030\142" +
    "\001\001\000\002\001\001\000\012\022\055\031\062\032" +
    "\065\050\153\001\001\000\004\042\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\150\001\001\000" +
    "\002\001\001\000\034\003\034\016\041\017\051\023\152" +
    "\024\030\025\047\033\042\034\044\035\025\037\033\041" +
    "\037\045\040\047\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\155\001\001\000\034\003\034\016" +
    "\041\017\051\023\156\024\030\025\047\033\042\034\044" +
    "\035\025\037\033\041\037\045\040\047\031\001\001\000" +
    "\010\026\146\027\157\030\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\163\001" +
    "\001\000\002\001\001\000\014\004\213\011\245\012\216" +
    "\022\055\032\217\001\001\000\002\001\001\000\004\036" +
    "\173\001\001\000\004\036\241\001\001\000\002\001\001" +
    "\000\004\042\211\001\001\000\004\042\210\001\001\000" +
    "\004\042\202\001\001\000\002\001\001\000\004\036\207" +
    "\001\001\000\004\036\206\001\001\000\004\036\205\001" +
    "\001\000\004\036\204\001\001\000\004\036\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\213\011\214\012" +
    "\216\022\055\032\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\232\001\001\000\004\004\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\213\011\234\012\216\022\055\032\217\001\001" +
    "\000\002\001\001\000\012\004\213\012\237\022\055\032" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\213\011\261\012\216\022\055" +
    "\032\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\274\001\001" +
    "\000\034\003\034\016\041\017\051\023\275\024\030\025" +
    "\047\033\042\034\044\035\025\037\033\041\037\045\040" +
    "\047\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\300\001\001\000\002\001\001\000\012\007\016" +
    "\014\304\044\014\046\015\001\001\000\012\007\016\014" +
    "\303\044\014\046\015\001\001\000\010\007\022\044\014" +
    "\046\015\001\001\000\010\007\022\044\014\046\015\001" +
    "\001\000\002\001\001\000\010\040\311\051\312\052\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\321\052\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\213\011\324\012\216\022" +
    "\055\032\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\327\001\001\000\002\001\001\000\036\003" +
    "\034\010\331\016\041\017\051\023\035\024\030\025\047" +
    "\033\042\034\044\035\025\037\033\041\037\045\040\047" +
    "\031\001\001\000\004\021\333\001\001\000\006\022\055" +
    "\032\337\001\001\000\002\001\001\000\004\042\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\340" +
    "\001\001\000\002\001\001\000\014\004\213\011\342\012" +
    "\216\022\055\032\217\001\001\000\002\001\001\000\004" +
    "\042\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\350\001\001\000\036\003\034" +
    "\010\351\016\041\017\051\023\035\024\030\025\047\033" +
    "\042\034\044\035\025\037\033\041\037\045\040\047\031" +
    "\001\001\000\002\001\001\000\004\042\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\360\001\001" +
    "\000\002\001\001\000\004\004\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   @Override
      	public void syntax_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error con:"+ cur_token.value + " en la linea: " + (cur_token.left+1) +", columna: " + (cur_token.right+1),null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {


	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}


  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp ::= ParIzq exp ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp ::= exp Potencia exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp ::= exp Div exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp ::= exp Mult exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp ::= exp Resta exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp ::= exp Suma exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expMat ::= Id Asigna str final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expMat ::= Id Asigna TipoBoolean final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expMat ::= Id Asigna exp final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expLog ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 erroresSintacticos2.add(new Visual_Error(0,0,"se Esperaba una condicion en la fila"+errleft+"en la columna" +errright));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expLog ::= ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expLog ::= ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expLog ::= ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expLog ::= ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expLog ::= condicion And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expLog ::= condicion Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expLog ::= condicion Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expLog ::= Not ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expLog ::= Not ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expLog ::= Not ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expLog ::= Not ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expLog ::= condicion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorcomp ::= Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorcomp ::= Distinto 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorcomp ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorcomp ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorcomp ::= Menor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorcomp ::= Mayor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operando ::= tipos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operando ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= operando operadorcomp operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipos ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipos ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipos ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipos ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros ::= ByRef decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros ::= ByVal decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listparam ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listparam ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listparam ::= listparam Coma parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo ::= String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo ::= Integer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo ::= Char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mainstm ::= Sub Main ParIzq ParDer final functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // final ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // final ::= EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dostm ::= Do expLog final statementlist Loop While final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dostm ::= Do While expLog final statementlist Loop final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forstm ::= For Id Asigna Entero To Entero final statementlist Next Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elseifstm ::= ElseIf expLog Then final statementlist elselist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elsestm ::= Else final statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elselist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elselist ::= elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elselist ::= elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifstm ::= If expLog Then final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // iflist ::= ifstm statementlist elselist EndIf final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decvar ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipotype ::= Id Punto Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipotype",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= callfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= expMat 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= leer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= escribir 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= tipotype 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= dostm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= forstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= iflist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= decvarstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dec",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec ::= decvarstm dec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dec",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statementlist ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listdec ::= listdec Coma decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listdec ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dectype ::= Id As Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dectype ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decvarlist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // decvarlist ::= dectype EndLine decvarlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decvarstm ::= Dim listdec Asigna Entero final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decvarstm ::= Dim listdec final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decvarstm ::= Dim error 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		erroresSintacticos2.add(new Visual_Error(erleft,erright,"Token no esperado: Dim"));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // callfunction ::= sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callfunction ::= Call sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ret ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ret ::= Return Id ParIzq listparam ParDer final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ret ::= Return operando final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody ret EndFunction final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sfunction ::= Id ParIzq listparam ParDer EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // leer ::= Input ParIzq Id ParDer final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("leer",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // impre ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impre ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // impre ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // impre ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // escribir ::= Print impre final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escribir",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decfunction ::= types 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decfunction ::= ffunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decfunction ::= Sub sfunction functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // endtypes ::= decvarlist EndType 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("endtypes",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // endtypes ::= decvarlist EndType EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("endtypes",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types ::= Type Id EndLine endtypes 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("types",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functionlist ::= decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionlist ::= functionlist decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionbody ::= statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionbody",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ini ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= dec mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= dec functionlist error functionlist 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		 erroresSintacticos2.add(new Visual_Error(errleft+1,errright+1,"Se Esperaba un Main"));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= dec functionlist mainstm functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= dec mainstm functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= dec functionlist error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 erroresSintacticos2.add(new Visual_Error(errleft+1,errright+1,"Se Esperaba un Main en la Fila: " + errleft));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= dec functionlist mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

