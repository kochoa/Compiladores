
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 21 16:50:30 CST 2014
//----------------------------------------------------

package compiladores;

import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 21 16:50:30 CST 2014
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\010\003\000\002\014\004\000\002\014\003" +
    "\000\002\062\006\000\002\053\005\000\002\053\004\000" +
    "\002\007\007\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\064\007\000\002\065\015\000\002\065" +
    "\014\000\002\066\004\000\002\066\003\000\002\003\005" +
    "\000\002\003\007\000\002\070\005\000\002\070\002\000" +
    "\002\071\005\000\002\071\005\000\002\005\003\000\002" +
    "\005\005\000\002\030\003\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\044\003\000\002\044\003\000\002\054\006\000\002" +
    "\004\005\000\002\040\007\000\002\032\006\000\002\034" +
    "\003\000\002\034\003\000\002\034\002\000\002\033\004" +
    "\000\002\035\010\000\002\035\007\000\002\041\015\000" +
    "\002\042\011\000\002\042\011\000\002\055\003\000\002" +
    "\055\002\000\002\013\012\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\011\005" +
    "\000\002\011\003\000\002\011\002\000\002\012\004\000" +
    "\002\012\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\036\005\000\002\037" +
    "\003\000\002\037\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\067\003\000\002\067\006\000\002" +
    "\067\010\000\002\067\010\000\002\067\010\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\007\000\002\067\007\000\002\067\007\000" +
    "\002\067\003\000\002\052\006\000\002\051\003\000\002" +
    "\051\003\000\002\051\006\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\056\005\000\002\060\004\000" +
    "\002\061\005\000\002\061\005\000\002\061\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\000\067\004\001\002\000\004\027" +
    "\303\001\002\000\004\002\302\001\002\000\014\002\uffff" +
    "\003\013\037\012\067\010\120\011\001\002\000\014\002" +
    "\ufffc\003\ufffc\037\ufffc\067\ufffc\120\ufffc\001\002\000\004" +
    "\107\245\001\002\000\004\107\040\001\002\000\004\107" +
    "\017\001\002\000\014\002\ufff5\003\ufff5\037\ufff5\067\ufff5" +
    "\120\ufff5\001\002\000\014\002\ufff6\003\ufff6\037\ufff6\067" +
    "\ufff6\120\ufff6\001\002\000\014\002\ufffd\003\ufffd\037\ufffd" +
    "\067\ufffd\120\ufffd\001\002\000\014\002\ufff7\003\ufff7\037" +
    "\ufff7\067\ufff7\120\ufff7\001\002\000\004\106\020\001\002" +
    "\000\006\061\uffec\107\022\001\002\000\004\106\036\001" +
    "\002\000\004\025\027\001\002\000\014\002\ufffb\003\ufffb" +
    "\037\ufffb\067\ufffb\120\ufffb\001\002\000\004\061\025\001" +
    "\002\000\016\002\ufff9\003\ufff9\037\ufff9\067\ufff9\106\026" +
    "\120\ufff9\001\002\000\014\002\ufffa\003\ufffa\037\ufffa\067" +
    "\ufffa\120\ufffa\001\002\000\014\032\030\033\032\034\033" +
    "\035\035\107\031\001\002\000\046\026\uffcc\043\uffcc\044" +
    "\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\055\uffcc\057\uffcc" +
    "\060\uffcc\062\uffcc\063\uffcc\074\uffcc\106\uffcc\107\uffcc\111" +
    "\uffcc\112\uffcc\113\uffcc\001\002\000\004\106\uffea\001\002" +
    "\000\046\026\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\052" +
    "\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb\062\uffcb\063\uffcb" +
    "\074\uffcb\106\uffcb\107\uffcb\111\uffcb\112\uffcb\113\uffcb\001" +
    "\002\000\046\026\uffca\043\uffca\044\uffca\046\uffca\047\uffca" +
    "\052\uffca\053\uffca\055\uffca\057\uffca\060\uffca\062\uffca\063" +
    "\uffca\074\uffca\106\uffca\107\uffca\111\uffca\112\uffca\113\uffca" +
    "\001\002\000\004\106\uffeb\001\002\000\046\026\uffc9\043" +
    "\uffc9\044\uffc9\046\uffc9\047\uffc9\052\uffc9\053\uffc9\055\uffc9" +
    "\057\uffc9\060\uffc9\062\uffc9\063\uffc9\074\uffc9\106\uffc9\107" +
    "\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000\006\061\uffec" +
    "\107\022\001\002\000\004\061\uffed\001\002\000\004\073" +
    "\041\001\002\000\012\031\045\074\uffc6\107\042\111\uffc6" +
    "\001\002\000\004\025\274\001\002\000\006\074\uffc7\111" +
    "\uffc7\001\002\000\006\074\uffc4\111\uffc4\001\002\000\004" +
    "\107\042\001\002\000\006\074\050\111\047\001\002\000" +
    "\006\031\045\107\042\001\002\000\004\025\051\001\002" +
    "\000\012\032\030\033\032\034\033\035\035\001\002\000" +
    "\004\106\053\001\002\000\016\026\055\043\071\044\075" +
    "\046\056\107\073\112\060\001\002\000\036\026\uffe2\043" +
    "\uffe2\044\uffe2\046\uffe2\047\uffe2\052\uffe2\053\uffe2\055\uffe2" +
    "\057\uffe2\060\uffe2\062\uffe2\063\uffe2\107\uffe2\112\uffe2\001" +
    "\002\000\004\107\042\001\002\000\004\107\250\001\002" +
    "\000\036\026\055\043\071\044\075\046\056\047\uffe7\052" +
    "\uffe7\053\uffe7\055\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7" +
    "\107\073\112\060\001\002\000\004\107\245\001\002\000" +
    "\036\026\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\052\uffdf" +
    "\053\uffdf\055\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\107" +
    "\uffdf\112\uffdf\001\002\000\004\060\243\001\002\000\036" +
    "\026\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\052\uffe0\053" +
    "\uffe0\055\uffe0\057\uffe0\060\uffe0\062\uffe0\063\uffe0\107\uffe0" +
    "\112\uffe0\001\002\000\036\026\uffe5\043\uffe5\044\uffe5\046" +
    "\uffe5\047\uffe5\052\uffe5\053\uffe5\055\uffe5\057\uffe5\060\uffe5" +
    "\062\uffe5\063\uffe5\107\uffe5\112\uffe5\001\002\000\006\057" +
    "\ufffe\060\ufffe\001\002\000\036\026\uffe1\043\uffe1\044\uffe1" +
    "\046\uffe1\047\uffe1\052\uffe1\053\uffe1\055\uffe1\057\uffe1\060" +
    "\uffe1\062\uffe1\063\uffe1\107\uffe1\112\uffe1\001\002\000\036" +
    "\026\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\052\ufff0\053" +
    "\ufff0\055\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\107\ufff0" +
    "\112\ufff0\001\002\000\036\026\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\047\uffe4\052\uffe4\053\uffe4\055\uffe4\057\uffe4\060\uffe4" +
    "\062\uffe4\063\uffe4\107\uffe4\112\uffe4\001\002\000\022\003" +
    "\107\036\104\040\077\041\105\073\112\102\103\107\102" +
    "\117\076\001\002\000\036\026\uffe3\043\uffe3\044\uffe3\046" +
    "\uffe3\047\uffe3\052\uffe3\053\uffe3\055\uffe3\057\uffe3\060\uffe3" +
    "\062\uffe3\063\uffe3\107\uffe3\112\uffe3\001\002\000\010\072" +
    "\205\073\204\113\206\001\002\000\016\026\055\043\071" +
    "\044\075\046\056\107\073\112\060\001\002\000\024\003" +
    "\107\036\104\040\077\041\105\045\100\073\112\102\103" +
    "\107\102\117\076\001\002\000\046\026\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\112\uffc2\113\uffc2\001\002\000\046\026\uffc1\043\uffc1" +
    "\044\uffc1\046\uffc1\047\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\112\uffc1\113\uffc1\001\002\000\022\003\107\036" +
    "\104\040\077\041\105\073\112\102\103\107\102\117\076" +
    "\001\002\000\046\026\uffbd\043\uffbd\044\uffbd\046\uffbd\047" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\112\uffbd\113" +
    "\uffbd\001\002\000\046\026\uffbe\043\uffbe\044\uffbe\046\uffbe" +
    "\047\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\112\uffbe" +
    "\113\uffbe\001\002\000\004\073\147\001\002\000\046\026" +
    "\uffc3\043\uffc3\044\uffc3\046\uffc3\047\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\100\uffc3\101\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\106\uffc3\107\uffc3\112\uffc3\113\uffc3\001\002\000\046" +
    "\026\uffc0\043\uffc0\044\uffc0\046\uffc0\047\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\107\uffc0\112\uffc0\113\uffc0\001\002\000" +
    "\032\026\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\074\uffb6" +
    "\103\141\104\143\105\142\106\uffb6\107\uffb6\112\uffb6\001" +
    "\002\000\024\026\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa" +
    "\074\uffaa\106\uffaa\107\uffaa\112\uffaa\001\002\000\004\106" +
    "\133\001\002\000\016\075\124\076\125\077\123\100\131" +
    "\101\127\113\130\001\002\000\022\003\107\036\104\040" +
    "\077\041\105\073\112\102\103\107\102\117\076\001\002" +
    "\000\004\074\114\001\002\000\032\026\uffae\043\uffae\044" +
    "\uffae\046\uffae\047\uffae\074\uffae\103\115\104\117\105\116" +
    "\106\uffae\107\uffae\112\uffae\001\002\000\022\003\107\036" +
    "\104\040\077\041\105\073\112\102\103\107\102\117\076" +
    "\001\002\000\022\003\107\036\104\040\077\041\105\073" +
    "\112\102\103\107\102\117\076\001\002\000\022\003\107" +
    "\036\104\040\077\041\105\073\112\102\103\107\102\117" +
    "\076\001\002\000\024\026\uffad\043\uffad\044\uffad\046\uffad" +
    "\047\uffad\074\uffad\106\uffad\107\uffad\112\uffad\001\002\000" +
    "\024\026\uffac\043\uffac\044\uffac\046\uffac\047\uffac\074\uffac" +
    "\106\uffac\107\uffac\112\uffac\001\002\000\024\026\uffab\043" +
    "\uffab\044\uffab\046\uffab\047\uffab\074\uffab\106\uffab\107\uffab" +
    "\112\uffab\001\002\000\014\036\uffb8\040\uffb8\041\uffb8\107" +
    "\uffb8\117\uffb8\001\002\000\014\036\uffbb\040\uffbb\041\uffbb" +
    "\107\uffbb\117\uffbb\001\002\000\014\036\uffbc\040\uffbc\041" +
    "\uffbc\107\uffbc\117\uffbc\001\002\000\014\036\104\040\077" +
    "\041\105\107\102\117\076\001\002\000\014\036\uffba\040" +
    "\uffba\041\uffba\107\uffba\117\uffba\001\002\000\014\036\uffb7" +
    "\040\uffb7\041\uffb7\107\uffb7\117\uffb7\001\002\000\014\036" +
    "\uffb9\040\uffb9\041\uffb9\107\uffb9\117\uffb9\001\002\000\032" +
    "\026\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf\074\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\112\uffbf\001\002" +
    "\000\016\026\055\043\071\044\075\046\056\107\073\112" +
    "\060\001\002\000\004\062\135\001\002\000\004\045\136" +
    "\001\002\000\040\026\uffce\043\uffce\044\uffce\046\uffce\047" +
    "\uffce\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce\062\uffce" +
    "\063\uffce\106\137\107\uffce\112\uffce\001\002\000\050\002" +
    "\uffcf\003\uffcf\026\uffcf\037\uffcf\043\uffcf\044\uffcf\046\uffcf" +
    "\047\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf\060\uffcf\062" +
    "\uffcf\063\uffcf\067\uffcf\107\uffcf\112\uffcf\120\uffcf\001\002" +
    "\000\036\026\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\057\uffd0\060\uffd0\062\uffd0\063\uffd0" +
    "\107\uffd0\112\uffd0\001\002\000\022\003\107\036\104\040" +
    "\077\041\105\073\112\102\103\107\102\117\076\001\002" +
    "\000\022\003\107\036\104\040\077\041\105\073\112\102" +
    "\103\107\102\117\076\001\002\000\022\003\107\036\104" +
    "\040\077\041\105\073\112\102\103\107\102\117\076\001" +
    "\002\000\024\026\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\074\uffb1\106\uffb1\107\uffb1\112\uffb1\001\002\000\024\026" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\074\uffb0\106\uffb0" +
    "\107\uffb0\112\uffb0\001\002\000\024\026\uffaf\043\uffaf\044" +
    "\uffaf\046\uffaf\047\uffaf\074\uffaf\106\uffaf\107\uffaf\112\uffaf" +
    "\001\002\000\022\003\107\036\104\040\077\041\105\073" +
    "\112\102\103\107\102\117\076\001\002\000\004\074\151" +
    "\001\002\000\032\026\uffb5\043\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\074\uffb5\103\152\104\154\105\153\106\uffb5\107\uffb5" +
    "\112\uffb5\001\002\000\022\003\107\036\104\040\077\041" +
    "\105\073\112\102\103\107\102\117\076\001\002\000\022" +
    "\003\107\036\104\040\077\041\105\073\112\102\103\107" +
    "\102\117\076\001\002\000\022\003\107\036\104\040\077" +
    "\041\105\073\112\102\103\107\102\117\076\001\002\000" +
    "\024\026\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\074\uffb4" +
    "\106\uffb4\107\uffb4\112\uffb4\001\002\000\024\026\uffb3\043" +
    "\uffb3\044\uffb3\046\uffb3\047\uffb3\074\uffb3\106\uffb3\107\uffb3" +
    "\112\uffb3\001\002\000\024\026\uffb2\043\uffb2\044\uffb2\046" +
    "\uffb2\047\uffb2\074\uffb2\106\uffb2\107\uffb2\112\uffb2\001\002" +
    "\000\004\106\161\001\002\000\016\026\055\043\071\044" +
    "\075\046\056\107\073\112\060\001\002\000\004\062\163" +
    "\001\002\000\040\026\uffce\043\uffce\044\uffce\046\uffce\047" +
    "\uffce\052\uffce\053\uffce\055\uffce\057\uffce\060\uffce\062\uffce" +
    "\063\uffce\106\137\107\uffce\112\uffce\001\002\000\036\026" +
    "\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\107\uffd1\112" +
    "\uffd1\001\002\000\010\052\170\053\167\055\uffd6\001\002" +
    "\000\004\055\uffd7\001\002\000\022\003\107\036\104\040" +
    "\077\041\105\073\112\102\103\107\102\117\076\001\002" +
    "\000\006\055\uffce\106\137\001\002\000\004\055\173\001" +
    "\002\000\004\055\uffd8\001\002\000\040\026\uffce\043\uffce" +
    "\044\uffce\046\uffce\047\uffce\052\uffce\053\uffce\055\uffce\057" +
    "\uffce\060\uffce\062\uffce\063\uffce\106\137\107\uffce\112\uffce" +
    "\001\002\000\036\026\uffda\043\uffda\044\uffda\046\uffda\047" +
    "\uffda\052\uffda\053\uffda\055\uffda\057\uffda\060\uffda\062\uffda" +
    "\063\uffda\107\uffda\112\uffda\001\002\000\004\055\uffd5\001" +
    "\002\000\016\026\055\043\071\044\075\046\056\107\073" +
    "\112\060\001\002\000\004\047\200\001\002\000\006\055" +
    "\uffce\106\201\001\002\000\006\053\167\055\uffcf\001\002" +
    "\000\004\055\uffd3\001\002\000\004\055\uffd4\001\002\000" +
    "\012\031\045\074\uffc6\107\042\111\uffc6\001\002\000\004" +
    "\107\233\001\002\000\010\036\212\073\207\107\210\001" +
    "\002\000\010\036\212\073\207\107\210\001\002\000\022" +
    "\013\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\073\226\074" +
    "\uffa7\106\uffa7\001\002\000\016\013\217\021\220\022\216" +
    "\023\214\024\215\106\213\001\002\000\020\013\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\074\uffa8\106\uffa8\001\002" +
    "\000\036\026\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9\052" +
    "\uffa9\053\uffa9\055\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9" +
    "\107\uffa9\112\uffa9\001\002\000\010\036\212\073\207\107" +
    "\210\001\002\000\010\036\212\073\207\107\210\001\002" +
    "\000\010\036\212\073\207\107\210\001\002\000\010\036" +
    "\212\073\207\107\210\001\002\000\010\036\212\073\207" +
    "\107\210\001\002\000\020\013\217\021\uffa5\022\uffa5\023" +
    "\214\024\215\074\uffa5\106\uffa5\001\002\000\020\013\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\074\uffa1\106\uffa1\001" +
    "\002\000\020\013\217\021\uffa4\022\uffa4\023\214\024\215" +
    "\074\uffa4\106\uffa4\001\002\000\020\013\217\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\074\uffa2\106\uffa2\001\002\000\020" +
    "\013\217\021\uffa3\022\uffa3\023\uffa3\024\uffa3\074\uffa3\106" +
    "\uffa3\001\002\000\012\031\045\074\uffc6\107\042\111\uffc6" +
    "\001\002\000\006\074\230\111\047\001\002\000\020\013" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\074\uffa6\106\uffa6" +
    "\001\002\000\016\013\217\021\220\022\216\023\214\024" +
    "\215\074\232\001\002\000\020\013\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\074\uffa0\106\uffa0\001\002\000\004\106" +
    "\234\001\002\000\036\026\uffdc\043\uffdc\044\uffdc\046\uffdc" +
    "\047\uffdc\052\uffdc\053\uffdc\055\uffdc\057\uffdc\060\uffdc\062" +
    "\uffdc\063\uffdc\107\uffdc\112\uffdc\001\002\000\006\074\236" +
    "\111\047\001\002\000\004\106\237\001\002\000\036\026" +
    "\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4" +
    "\055\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\107\ufff4\112" +
    "\ufff4\001\002\000\004\047\241\001\002\000\020\026\uffce" +
    "\043\uffce\044\uffce\046\uffce\106\137\107\uffce\112\uffce\001" +
    "\002\000\016\026\uffd9\043\uffd9\044\uffd9\046\uffd9\107\uffd9" +
    "\112\uffd9\001\002\000\016\002\ufff2\003\ufff2\037\ufff2\067" +
    "\ufff2\106\244\120\ufff2\001\002\000\014\002\ufff3\003\ufff3" +
    "\037\ufff3\067\ufff3\120\ufff3\001\002\000\004\073\204\001" +
    "\002\000\036\026\ufff1\043\ufff1\044\ufff1\046\ufff1\047\ufff1" +
    "\052\ufff1\053\ufff1\055\ufff1\057\ufff1\060\ufff1\062\ufff1\063" +
    "\ufff1\107\ufff1\112\ufff1\001\002\000\022\047\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\001" +
    "\002\000\004\113\251\001\002\000\004\036\252\001\002" +
    "\000\004\051\253\001\002\000\004\036\254\001\002\000" +
    "\004\106\255\001\002\000\016\026\055\043\071\044\075" +
    "\046\056\107\073\112\060\001\002\000\004\063\257\001" +
    "\002\000\004\107\260\001\002\000\040\026\uffce\043\uffce" +
    "\044\uffce\046\uffce\047\uffce\052\uffce\053\uffce\055\uffce\057" +
    "\uffce\060\uffce\062\uffce\063\uffce\106\137\107\uffce\112\uffce" +
    "\001\002\000\036\026\uffd2\043\uffd2\044\uffd2\046\uffd2\047" +
    "\uffd2\052\uffd2\053\uffd2\055\uffd2\057\uffd2\060\uffd2\062\uffd2" +
    "\063\uffd2\107\uffd2\112\uffd2\001\002\000\044\026\uffce\043" +
    "\uffce\044\uffce\046\uffce\047\uffce\052\uffce\053\uffce\055\uffce" +
    "\057\uffce\060\uffce\062\uffce\063\uffce\106\137\107\uffce\111" +
    "\264\112\uffce\113\266\001\002\000\044\026\uffe9\043\uffe9" +
    "\044\uffe9\046\uffe9\047\uffe9\052\uffe9\053\uffe9\055\uffe9\057" +
    "\uffe9\060\uffe9\062\uffe9\063\uffe9\106\uffe9\107\uffe9\111\uffe9" +
    "\112\uffe9\113\uffe9\001\002\000\004\107\042\001\002\000" +
    "\036\026\uffef\043\uffef\044\uffef\046\uffef\047\uffef\052\uffef" +
    "\053\uffef\055\uffef\057\uffef\060\uffef\062\uffef\063\uffef\107" +
    "\uffef\112\uffef\001\002\000\004\036\267\001\002\000\040" +
    "\026\uffce\043\uffce\044\uffce\046\uffce\047\uffce\052\uffce\053" +
    "\uffce\055\uffce\057\uffce\060\uffce\062\uffce\063\uffce\106\137" +
    "\107\uffce\112\uffce\001\002\000\036\026\uffee\043\uffee\044" +
    "\uffee\046\uffee\047\uffee\052\uffee\053\uffee\055\uffee\057\uffee" +
    "\060\uffee\062\uffee\063\uffee\107\uffee\112\uffee\001\002\000" +
    "\044\026\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\052\uffe8" +
    "\053\uffe8\055\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8\106" +
    "\uffe8\107\uffe8\111\uffe8\112\uffe8\113\uffe8\001\002\000\006" +
    "\074\uffc8\111\uffc8\001\002\000\006\074\uffc5\111\uffc5\001" +
    "\002\000\012\032\030\033\032\034\033\035\035\001\002" +
    "\000\046\026\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb" +
    "\074\uffdb\106\uffdb\107\uffdb\111\uffdb\112\uffdb\113\uffdb\001" +
    "\002\000\016\026\055\043\071\044\075\046\056\107\073" +
    "\112\060\001\002\000\004\057\300\001\002\000\016\002" +
    "\uffce\003\uffce\037\uffce\067\uffce\106\137\120\uffce\001\002" +
    "\000\014\002\ufff8\003\ufff8\037\ufff8\067\ufff8\120\ufff8\001" +
    "\002\000\004\002\001\001\002\000\004\073\304\001\002" +
    "\000\004\074\305\001\002\000\004\106\306\001\002\000" +
    "\016\026\055\043\071\044\075\046\056\107\073\112\060" +
    "\001\002\000\004\057\310\001\002\000\016\002\uffce\003" +
    "\uffce\037\uffce\067\uffce\106\137\120\uffce\001\002\000\014" +
    "\002\uffcd\003\uffcd\037\uffcd\067\uffcd\120\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\010\002\004\013\006\014\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\014\062\013" +
    "\065\015\001\001\000\002\001\001\000\004\064\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\022\070\023\071\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\070\036\071\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\043\011\045\012\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\272\001\001\000\002\001\001\000\006" +
    "\004\043\012\271\001\001\000\002\001\001\000\004\006" +
    "\051\001\001\000\002\001\001\000\032\003\063\010\061" +
    "\030\064\031\056\032\073\040\067\041\071\042\053\052" +
    "\062\054\065\064\066\066\060\001\001\000\002\001\001" +
    "\000\006\004\262\005\261\001\001\000\002\001\001\000" +
    "\030\003\063\030\246\031\056\032\073\040\067\041\071" +
    "\042\053\052\062\054\065\064\066\066\060\001\001\000" +
    "\004\064\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\100\036\105\037\110\067\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\063\030\164\031\056" +
    "\032\073\040\067\041\071\042\053\052\062\054\065\064" +
    "\066\066\060\001\001\000\012\027\100\036\105\037\110" +
    "\067\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\100\036\105\037\110\067\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\125\001\001\000\012\027" +
    "\100\036\105\037\110\067\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\100\036\105\037\110\067" +
    "\121\001\001\000\012\027\100\036\105\037\110\067\120" +
    "\001\001\000\012\027\100\036\105\037\110\067\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\100\037\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\063\030\133\031\056\032\073\040\067\041\071\042\053" +
    "\052\062\054\065\064\066\066\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\100\036\105\037" +
    "\110\067\145\001\001\000\012\027\100\036\105\037\110" +
    "\067\144\001\001\000\012\027\100\036\105\037\110\067" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\100\036\105\037\110\067\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\100" +
    "\036\105\037\110\067\156\001\001\000\012\027\100\036" +
    "\105\037\110\067\155\001\001\000\012\027\100\036\105" +
    "\037\110\067\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\063" +
    "\030\161\031\056\032\073\040\067\041\071\042\053\052" +
    "\062\054\065\064\066\066\060\001\001\000\002\001\001" +
    "\000\004\055\163\001\001\000\002\001\001\000\010\033" +
    "\171\034\170\035\165\001\001\000\002\001\001\000\012" +
    "\027\100\036\105\037\110\067\175\001\001\000\004\055" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\063\030\176\031\056\032\073\040\067\041\071" +
    "\042\053\052\062\054\065\064\066\066\060\001\001\000" +
    "\002\001\001\000\004\055\201\001\001\000\004\035\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\043\011\234\012\042\001\001\000\002\001\001\000\004" +
    "\051\210\001\001\000\004\051\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\224\001\001\000\004\051\223\001\001\000" +
    "\004\051\222\001\001\000\004\051\221\001\001\000\004" +
    "\051\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\043\011\226\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\063\030\255" +
    "\031\056\032\073\040\067\041\071\042\053\052\062\054" +
    "\065\064\066\066\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\260\001\001\000\002\001\001\000" +
    "\004\055\264\001\001\000\002\001\001\000\004\004\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\274\001\001\000" +
    "\002\001\001\000\032\003\063\010\276\030\064\031\056" +
    "\032\073\040\067\041\071\042\053\052\062\054\065\064" +
    "\066\066\060\001\001\000\002\001\001\000\004\055\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\063" +
    "\010\306\030\064\031\056\032\073\040\067\041\071\042" +
    "\053\052\062\054\065\064\066\066\060\001\001\000\002" +
    "\001\001\000\004\055\310\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   
      	public void report_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error at line " + (cur_token.left+1) +", column " + (cur_token.right+1), null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {


	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comentario ::= com 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comentario",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorarit ::= Div 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorarit ::= Mult 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorarit ::= Resta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorarit ::= Suma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorder ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorder ::= operadorder operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorder ::= operando operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorizq ::= operando Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorizq",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operador ::= operadorizq operadorder EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operador",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp ::= ParIzq exp ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp ::= exp Potencia exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp ::= exp Div exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp ::= exp Mult exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp ::= exp Resta exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= exp Suma exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expMat ::= Id Asigna exp EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expLog ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 erroresSintacticos2.add(new Visual_Error(0,0,"se Esperaba una condicion en la fila"+errleft+"en la columna" +errright));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expLog ::= ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expLog ::= ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expLog ::= ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expLog ::= ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expLog ::= condicion And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expLog ::= condicion Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expLog ::= condicion Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expLog ::= Not ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expLog ::= Not ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expLog ::= Not ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expLog ::= Not ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expLog ::= condicion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadorcomp ::= Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadorcomp ::= Distinto 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorcomp ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorcomp ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operadorcomp ::= Menor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operadorcomp ::= Mayor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operando ::= tipos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operando ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicion ::= operando operadorcomp operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipos ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipos ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipos ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipos ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= ByVal decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listparam ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listparam ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listparam ::= listparam Coma parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= Integer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= Char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mainstm ::= Sub Main ParIzq ParDer EndLine functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // final ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // final ::= EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dostm ::= Do expLog EndLine statementlist Loop While final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dostm ::= Do While expLog EndLine statementlist Loop final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forstm ::= For Id Asigna Entero To Entero EndLine statementlist Next Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseifstm ::= ElseIf expLog statementlist Then final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elseifstm ::= ElseIf expLog statementlist Then EndLine elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elsestm ::= Else final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elselist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elselist ::= elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elselist ::= elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifstm ::= If expLog Then final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iflist ::= ifstm statementlist elselist EndIf final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decvar ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipotype ::= Id Punto Id EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipotype",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variables ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variables ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= callfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= expMat 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= tipotype 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= dostm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= forstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= iflist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= decvarstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statementlist ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listdec ::= listdec Coma decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listdec ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dectype ::= Id As Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dectype ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decvarlist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decvarlist ::= dectype EndLine decvarlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decvarstm ::= Dim listdec Asigna Entero final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decvarstm ::= Dim listdec final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // callfunction ::= sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // callfunction ::= Call sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sfunction ::= Id ParIzq listparam ParDer EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decfunction ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 erroresSintacticos2.add(new Visual_Error(0,0,"probando en la fila"+errleft+"en la columna" +errright));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decfunction ::= types 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decfunction ::= ffunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decfunction ::= Sub sfunction functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // endtypes ::= decvarlist EndType 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("endtypes",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // endtypes ::= decvarlist EndType EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("endtypes",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // types ::= Type Id EndLine endtypes 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("types",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionlist ::= mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionlist ::= functionlist decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functionbody ::= statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionbody",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

