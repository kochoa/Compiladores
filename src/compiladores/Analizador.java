
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 21 10:42:21 CST 2014
//----------------------------------------------------

package compiladores;

import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 21 10:42:21 CST 2014
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\002\003\000\002\010\003\000\002\014\004" +
    "\000\002\014\003\000\002\055\010\000\002\007\007\000" +
    "\002\007\006\000\002\007\003\000\002\007\003\000\002" +
    "\057\006\000\002\060\015\000\002\060\014\000\002\061" +
    "\004\000\002\003\005\000\002\003\004\000\002\003\007" +
    "\000\002\003\006\000\002\056\003\000\002\056\005\000" +
    "\002\056\002\000\002\005\003\000\002\005\005\000\002" +
    "\030\003\000\002\030\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\044\003\000\002\044\003\000" +
    "\002\004\005\000\002\040\007\000\002\040\006\000\002" +
    "\032\006\000\002\032\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\004\000\002\034\002\000\002\033\004" +
    "\000\002\033\003\000\002\035\007\000\002\035\006\000" +
    "\002\035\006\000\002\035\005\000\002\041\015\000\002" +
    "\041\014\000\002\042\010\000\002\042\007\000\002\042" +
    "\010\000\002\042\007\000\002\013\012\000\002\013\011" +
    "\000\002\050\003\000\002\050\006\000\002\050\004\000" +
    "\002\047\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\005\000\002\011" +
    "\003\000\002\011\002\000\002\012\004\000\002\012\004" +
    "\000\002\012\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\036\005\000\002" +
    "\037\003\000\002\037\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\051\005\000\002\053\004\000" +
    "\002\054\005\000\002\054\005\000\002\054\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\046\003\000\002\015\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\021\005\000\002\021\005\000\002" +
    "\022\005\000\002\022\005\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\026\002\000\022\020\032\005\033\010\034" +
    "\023\035\025\067\016\072\026\101\011\106\021\001\002" +
    "\000\006\023\254\024\255\001\002\000\006\023\uff93\024" +
    "\uff93\001\002\000\012\002\ufffb\003\ufffb\067\ufffb\117\ufffb" +
    "\001\002\000\004\002\253\001\002\000\006\023\uff95\024" +
    "\uff95\001\002\000\020\022\020\032\005\033\010\034\023" +
    "\035\025\072\026\106\021\001\002\000\012\002\uffff\003" +
    "\221\067\220\117\217\001\002\000\004\002\ufffe\001\002" +
    "\000\006\102\215\103\uffa0\001\002\000\006\021\212\022" +
    "\211\001\002\000\004\027\045\001\002\000\006\023\uff97" +
    "\024\uff97\001\002\000\016\032\005\033\010\034\023\035" +
    "\025\072\026\106\021\001\002\000\006\023\uff91\024\uff91" +
    "\001\002\000\016\074\035\075\036\076\034\077\042\100" +
    "\040\112\041\001\002\000\006\023\uff94\024\uff94\001\002" +
    "\000\004\103\032\001\002\000\006\023\uff92\024\uff92\001" +
    "\002\000\022\022\020\032\005\033\010\034\023\035\025" +
    "\072\026\101\011\106\021\001\002\000\006\102\uff9e\103" +
    "\uff9e\001\002\000\004\073\031\001\002\000\006\023\uff96" +
    "\024\uff96\001\002\000\022\022\020\032\005\033\010\034" +
    "\023\035\025\072\026\101\011\106\021\001\002\000\006" +
    "\002\uffa2\073\uffa2\001\002\000\022\022\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\072\uffae\106\uffae\001\002" +
    "\000\022\022\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\072\uffb1\106\uffb1\001\002\000\022\022\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\072\uffb2\106\uffb2\001" +
    "\002\000\020\022\020\032\005\033\010\034\023\035\025" +
    "\072\026\106\021\001\002\000\022\022\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\072\uffb0\106\uffb0\001\002" +
    "\000\022\022\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\072\uffad\106\uffad\001\002\000\022\022\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\072\uffaf\106\uffaf\001" +
    "\002\000\006\102\uff9d\103\uff9d\001\002\000\006\023\uff98" +
    "\024\uff98\001\002\000\004\072\046\001\002\000\004\073" +
    "\047\001\002\000\004\105\050\001\002\000\020\026\052" +
    "\036\061\043\067\044\073\046\053\106\071\111\055\001" +
    "\002\000\036\026\uffe3\036\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\052\uffe3\053\uffe3\055\uffe3\057\uffe3\060\uffe3\062\uffe3\063" +
    "\uffe3\106\uffe3\111\uffe3\001\002\000\004\106\172\001\002" +
    "\000\004\106\160\001\002\000\036\026\052\036\061\043" +
    "\067\044\073\046\053\052\uffe8\053\uffe8\055\uffe8\057\uffe8" +
    "\060\uffe8\062\uffe8\063\uffe8\106\071\111\055\001\002\000" +
    "\004\106\152\001\002\000\036\026\uffe1\036\uffe1\043\uffe1" +
    "\044\uffe1\046\uffe1\052\uffe1\053\uffe1\055\uffe1\057\uffe1\060" +
    "\uffe1\062\uffe1\063\uffe1\106\uffe1\111\uffe1\001\002\000\004" +
    "\057\150\001\002\000\036\026\uffe6\036\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\052\uffe6\053\uffe6\055\uffe6\057\uffe6\060\uffe6" +
    "\062\uffe6\063\uffe6\106\uffe6\111\uffe6\001\002\000\032\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\047\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\105\uffb3\112\uffb3\001\002\000" +
    "\010\003\134\036\061\106\071\001\002\000\006\057\ufffd" +
    "\060\ufffd\001\002\000\004\112\133\001\002\000\036\026" +
    "\uffe2\036\uffe2\043\uffe2\044\uffe2\046\uffe2\052\uffe2\053\uffe2" +
    "\055\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\106\uffe2\111" +
    "\uffe2\001\002\000\036\026\uffe5\036\uffe5\043\uffe5\044\uffe5" +
    "\046\uffe5\052\uffe5\053\uffe5\055\uffe5\057\uffe5\060\uffe5\062" +
    "\uffe5\063\uffe5\106\uffe5\111\uffe5\001\002\000\006\036\061" +
    "\106\071\001\002\000\036\026\uffe4\036\uffe4\043\uffe4\044" +
    "\uffe4\046\uffe4\052\uffe4\053\uffe4\055\uffe4\057\uffe4\060\uffe4" +
    "\062\uffe4\063\uffe4\106\uffe4\111\uffe4\001\002\000\032\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\047\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\105\uffb4\112\uffb4\001\002\000" +
    "\020\026\052\036\061\043\067\044\073\046\053\106\071" +
    "\111\055\001\002\000\006\045\074\105\075\001\002\000" +
    "\004\105\102\001\002\000\020\026\052\036\061\043\067" +
    "\044\073\046\053\106\071\111\055\001\002\000\004\062" +
    "\077\001\002\000\004\045\100\001\002\000\040\026\uffca" +
    "\036\uffca\043\uffca\044\uffca\046\uffca\052\uffca\053\uffca\055" +
    "\uffca\057\uffca\060\uffca\062\uffca\063\uffca\105\101\106\uffca" +
    "\111\uffca\001\002\000\036\026\uffcb\036\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\052\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\063\uffcb\106\uffcb\111\uffcb\001\002\000\020\026" +
    "\052\036\061\043\067\044\073\046\053\106\071\111\055" +
    "\001\002\000\004\062\104\001\002\000\040\026\uffcc\036" +
    "\uffcc\043\uffcc\044\uffcc\046\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\062\uffcc\063\uffcc\105\105\106\uffcc\111" +
    "\uffcc\001\002\000\036\026\uffcd\036\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\052\uffcd\053\uffcd\055\uffcd\057\uffcd\060\uffcd\062" +
    "\uffcd\063\uffcd\106\uffcd\111\uffcd\001\002\000\010\052\111" +
    "\053\110\055\uffd6\001\002\000\006\052\111\055\uffd8\001" +
    "\002\000\006\036\061\106\071\001\002\000\006\055\uffd4" +
    "\105\116\001\002\000\004\055\uffd9\001\002\000\004\055" +
    "\114\001\002\000\040\026\uffdc\036\uffdc\043\uffdc\044\uffdc" +
    "\046\uffdc\052\uffdc\053\uffdc\055\uffdc\057\uffdc\060\uffdc\062" +
    "\uffdc\063\uffdc\105\115\106\uffdc\111\uffdc\001\002\000\036" +
    "\026\uffdd\036\uffdd\043\uffdd\044\uffdd\046\uffdd\052\uffdd\053" +
    "\uffdd\055\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\106\uffdd" +
    "\111\uffdd\001\002\000\004\055\uffd5\001\002\000\004\047" +
    "\123\001\002\000\016\074\035\075\036\076\034\077\042" +
    "\100\040\112\041\001\002\000\006\036\061\106\071\001" +
    "\002\000\004\047\uffb5\001\002\000\012\052\uffd0\053\110" +
    "\055\uffd0\105\125\001\002\000\006\052\uffd2\055\uffd2\001" +
    "\002\000\010\052\uffd1\053\110\055\uffd1\001\002\000\006" +
    "\052\uffd3\055\uffd3\001\002\000\004\055\uffd7\001\002\000" +
    "\004\047\131\001\002\000\022\026\uffda\036\uffda\043\uffda" +
    "\044\uffda\046\uffda\105\132\106\uffda\111\uffda\001\002\000" +
    "\020\026\uffdb\036\uffdb\043\uffdb\044\uffdb\046\uffdb\106\uffdb" +
    "\111\uffdb\001\002\000\010\003\uffab\036\uffab\106\uffab\001" +
    "\002\000\014\021\uffa8\022\uffa8\023\uffa8\024\uffa8\105\uffa8" +
    "\001\002\000\014\021\143\022\141\023\140\024\142\105" +
    "\146\001\002\000\012\021\143\022\141\023\140\024\142" +
    "\001\002\000\006\036\061\106\071\001\002\000\006\036" +
    "\uffa5\106\uffa5\001\002\000\006\036\uffa6\106\uffa6\001\002" +
    "\000\006\036\uffa4\106\uffa4\001\002\000\006\036\uffa7\106" +
    "\uffa7\001\002\000\014\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\105\uffaa\001\002\000\006\036\061\106\071\001\002\000" +
    "\036\026\uffac\036\uffac\043\uffac\044\uffac\046\uffac\052\uffac" +
    "\053\uffac\055\uffac\057\uffac\060\uffac\062\uffac\063\uffac\106" +
    "\uffac\111\uffac\001\002\000\014\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\105\uffa9\001\002\000\014\002\uffc8\003\uffc8\067" +
    "\uffc8\105\151\117\uffc8\001\002\000\012\002\uffc9\003\uffc9" +
    "\067\uffc9\117\uffc9\001\002\000\004\072\154\001\002\000" +
    "\036\026\ufff2\036\ufff2\043\ufff2\044\ufff2\046\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\106" +
    "\ufff2\111\ufff2\001\002\000\004\073\155\001\002\000\004" +
    "\105\156\001\002\000\036\026\ufff5\036\ufff5\043\ufff5\044" +
    "\ufff5\046\ufff5\052\ufff5\053\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\062\ufff5\063\ufff5\106\ufff5\111\ufff5\001\002\000\020\052" +
    "\uffe7\053\uffe7\055\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7" +
    "\001\002\000\004\112\161\001\002\000\004\036\162\001" +
    "\002\000\004\051\163\001\002\000\004\036\164\001\002" +
    "\000\004\105\165\001\002\000\020\026\052\036\061\043" +
    "\067\044\073\046\053\106\071\111\055\001\002\000\004" +
    "\063\167\001\002\000\004\106\170\001\002\000\040\026" +
    "\uffce\036\uffce\043\uffce\044\uffce\046\uffce\052\uffce\053\uffce" +
    "\055\uffce\057\uffce\060\uffce\062\uffce\063\uffce\105\171\106" +
    "\uffce\111\uffce\001\002\000\036\026\uffcf\036\uffcf\043\uffcf" +
    "\044\uffcf\046\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf\060" +
    "\uffcf\062\uffcf\063\uffcf\106\uffcf\111\uffcf\001\002\000\004" +
    "\025\203\001\002\000\044\026\uffea\036\uffea\043\uffea\044" +
    "\uffea\046\uffea\052\uffea\053\uffea\055\uffea\057\uffea\060\uffea" +
    "\062\uffea\063\uffea\105\uffea\106\uffea\110\uffea\111\uffea\112" +
    "\uffea\001\002\000\044\026\ufff0\036\ufff0\043\ufff0\044\ufff0" +
    "\046\ufff0\052\ufff0\053\ufff0\055\ufff0\057\ufff0\060\ufff0\062" +
    "\ufff0\063\ufff0\105\176\106\ufff0\110\175\111\ufff0\112\177" +
    "\001\002\000\004\106\172\001\002\000\036\026\ufff1\036" +
    "\ufff1\043\ufff1\044\ufff1\046\ufff1\052\ufff1\053\ufff1\055\ufff1" +
    "\057\ufff1\060\ufff1\062\ufff1\063\ufff1\106\ufff1\111\ufff1\001" +
    "\002\000\004\036\200\001\002\000\040\026\uffee\036\uffee" +
    "\043\uffee\044\uffee\046\uffee\052\uffee\053\uffee\055\uffee\057" +
    "\uffee\060\uffee\062\uffee\063\uffee\105\201\106\uffee\111\uffee" +
    "\001\002\000\036\026\uffef\036\uffef\043\uffef\044\uffef\046" +
    "\uffef\052\uffef\053\uffef\055\uffef\057\uffef\060\uffef\062\uffef" +
    "\063\uffef\106\uffef\111\uffef\001\002\000\044\026\uffe9\036" +
    "\uffe9\043\uffe9\044\uffe9\046\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\057\uffe9\060\uffe9\062\uffe9\063\uffe9\105\uffe9\106\uffe9\110" +
    "\uffe9\111\uffe9\112\uffe9\001\002\000\012\032\204\033\205" +
    "\034\206\035\210\001\002\000\046\026\uffc3\036\uffc3\043" +
    "\uffc3\044\uffc3\046\uffc3\052\uffc3\053\uffc3\055\uffc3\057\uffc3" +
    "\060\uffc3\062\uffc3\063\uffc3\073\uffc3\105\uffc3\106\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\001\002\000\046\026\uffc2\036\uffc2" +
    "\043\uffc2\044\uffc2\046\uffc2\052\uffc2\053\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\062\uffc2\063\uffc2\073\uffc2\105\uffc2\106\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\001\002\000\046\026\uffc1\036" +
    "\uffc1\043\uffc1\044\uffc1\046\uffc1\052\uffc1\053\uffc1\055\uffc1" +
    "\057\uffc1\060\uffc1\062\uffc1\063\uffc1\073\uffc1\105\uffc1\106" +
    "\uffc1\110\uffc1\111\uffc1\112\uffc1\001\002\000\046\026\uffde" +
    "\036\uffde\043\uffde\044\uffde\046\uffde\052\uffde\053\uffde\055" +
    "\uffde\057\uffde\060\uffde\062\uffde\063\uffde\073\uffde\105\uffde" +
    "\106\uffde\110\uffde\111\uffde\112\uffde\001\002\000\046\026" +
    "\uffc0\036\uffc0\043\uffc0\044\uffc0\046\uffc0\052\uffc0\053\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\073\uffc0\105" +
    "\uffc0\106\uffc0\110\uffc0\111\uffc0\112\uffc0\001\002\000\020" +
    "\022\020\032\005\033\010\034\023\035\025\072\026\106" +
    "\021\001\002\000\020\022\020\032\005\033\010\034\023" +
    "\035\025\072\026\106\021\001\002\000\022\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103\uff9c\112\uff9c" +
    "\001\002\000\022\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100" +
    "\uff9b\102\uff9b\103\uff9b\112\uff9b\001\002\000\022\022\020" +
    "\032\005\033\010\034\023\035\025\072\026\101\011\106" +
    "\021\001\002\000\004\103\uffa1\001\002\000\004\106\230" +
    "\001\002\000\004\106\152\001\002\000\012\002\ufff6\003" +
    "\ufff6\067\ufff6\117\ufff6\001\002\000\012\002\ufff7\003\ufff7" +
    "\067\ufff7\117\ufff7\001\002\000\012\002\ufffc\003\ufffc\067" +
    "\ufffc\117\ufffc\001\002\000\020\026\052\036\061\043\067" +
    "\044\073\046\053\106\071\111\055\001\002\000\004\057" +
    "\226\001\002\000\014\002\ufff8\003\ufff8\067\ufff8\105\227" +
    "\117\ufff8\001\002\000\012\002\ufff9\003\ufff9\067\ufff9\117" +
    "\ufff9\001\002\000\004\072\231\001\002\000\014\030\232" +
    "\031\234\073\uffbd\106\172\110\uffbd\001\002\000\004\106" +
    "\172\001\002\000\006\073\uffbe\110\uffbe\001\002\000\004" +
    "\106\172\001\002\000\006\073\uffba\110\uffba\001\002\000" +
    "\006\073\240\110\237\001\002\000\010\030\232\031\234" +
    "\106\172\001\002\000\004\025\241\001\002\000\012\032" +
    "\204\033\205\034\206\035\210\001\002\000\004\105\243" +
    "\001\002\000\020\026\052\036\061\043\067\044\073\046" +
    "\053\106\071\111\055\001\002\000\004\060\245\001\002" +
    "\000\014\002\ufff3\003\ufff3\067\ufff3\105\246\117\ufff3\001" +
    "\002\000\012\002\ufff4\003\ufff4\067\ufff4\117\ufff4\001\002" +
    "\000\006\073\uffbf\110\uffbf\001\002\000\006\073\uffbb\110" +
    "\uffbb\001\002\000\006\073\uffbc\110\uffbc\001\002\000\006" +
    "\102\uff9f\103\uff9f\001\002\000\004\002\001\001\002\000" +
    "\020\022\020\032\005\033\010\034\023\035\025\072\026" +
    "\106\021\001\002\000\020\022\020\032\005\033\010\034" +
    "\023\035\025\072\026\106\021\001\002\000\006\021\uff99" +
    "\022\uff99\001\002\000\006\021\uff9a\022\uff9a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\030\002\006\013\005\014\011\015\012\016" +
    "\023\017\013\020\026\021\021\022\014\023\003\024\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\251" +
    "\021\021\022\014\023\003\024\016\001\001\000\006\007" +
    "\222\060\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\043\001\001\000\002\001\001\000\004\025\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\027\016\023\017\013\020\026\021\021" +
    "\022\014\023\003\024\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\032\016\023" +
    "\017\013\020\026\021\021\022\014\023\003\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\042\022\014\023\003\024" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\057" +
    "\010\056\030\062\031\053\032\071\037\063\040\065\041" +
    "\067\042\050\051\064\053\061\061\055\001\001\000\002" +
    "\001\001\000\006\004\172\005\173\001\001\000\002\001" +
    "\001\000\030\003\057\030\156\031\053\032\071\037\063" +
    "\040\065\041\067\042\050\051\064\053\061\061\055\001" +
    "\001\000\004\057\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\135\054\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\127\037" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\057\030\105\031\053\032\071\037\063\040\065\041" +
    "\067\042\050\051\064\053\061\061\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\057\030\075\031" +
    "\053\032\071\037\063\040\065\041\067\042\050\051\064" +
    "\053\061\061\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\057" +
    "\030\102\031\053\032\071\037\063\040\065\041\067\042" +
    "\050\051\064\053\061\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\111\034" +
    "\112\035\106\001\001\000\004\033\126\001\001\000\006" +
    "\036\116\037\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\120\001" +
    "\001\000\004\037\121\001\001\000\002\001\001\000\004" +
    "\035\123\001\001\000\002\001\001\000\004\035\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\144\001\001\000\004\052\136" +
    "\001\001\000\004\037\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\057\030\165\031\053\032\071" +
    "\037\063\040\065\041\067\042\050\051\064\053\061\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\213\022\014\023\003" +
    "\024\016\001\001\000\012\021\212\022\014\023\003\024" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\215\017\013\020\026\021\021\022\014\023\003\024" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\057\010\224\030\062\031\053" +
    "\032\071\037\063\040\065\041\067\042\050\051\064\053" +
    "\061\061\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\234\011" +
    "\235\012\232\001\001\000\004\004\250\001\001\000\002" +
    "\001\001\000\004\004\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\234\012\246\001\001\000\002" +
    "\001\001\000\004\006\241\001\001\000\002\001\001\000" +
    "\032\003\057\010\243\030\062\031\053\032\071\037\063" +
    "\040\065\041\067\042\050\051\064\053\061\061\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\256\023\003" +
    "\024\016\001\001\000\010\022\255\023\003\024\016\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   
      	public void report_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error at line " + (cur_token.left+1) +", column " + (cur_token.right+1), null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {


	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // value ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // value ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // value ::= Char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // value ::= String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // value ::= Integer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // value ::= ParIzq expression ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // negacionexp ::= value 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("negacionexp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // negacionexp ::= Resta value 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("negacionexp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // multiexp ::= negacionexp Div multiexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("multiexp",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // multiexp ::= negacionexp Mult multiexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("multiexp",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // addexp ::= multiexp Resta addexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("addexp",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // addexp ::= multiexp Suma addexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("addexp",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // compexp ::= addexp operadorcomp addexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("compexp",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // notexp ::= compexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("notexp",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // notexp ::= Not compexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("notexp",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // andexp ::= notexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("andexp",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // andexp ::= notexp And andexp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("andexp",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= andexp Or expression 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comentario ::= com 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comentario",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operadorarit ::= Div 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadorarit ::= Mult 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadorarit ::= Resta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorarit ::= Suma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorder ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorder ::= operadorder operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorder ::= operando operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorizq ::= operando Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorizq",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador ::= operadorizq operadorder EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorcomp ::= Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadorcomp ::= Distinto 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorcomp ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorcomp ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorcomp ::= Menor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorcomp ::= Mayor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operando ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operando ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion ::= operando operadorcomp operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipos ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipos ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipos ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipos ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= ByVal decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= ByRef decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listparam ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listparam ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listparam ::= listparam Coma parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo ::= String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= Integer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= Char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // frase ::= str Concatenacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("frase",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fraselist ::= fraselist frase 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fraselist ::= fraselist frase GuionBajo EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fraselist ::= frase 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mainstm ::= Sub Main ParIzq ParDer EndLine functionbody EndSub 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mainstm ::= Sub Main ParIzq ParDer EndLine functionbody EndSub EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dostm ::= Do EndLine statementlist Loop While 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dostm ::= Do EndLine statementlist Loop While EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dostm ::= Do While EndLine statementlist Loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dostm ::= Do While EndLine statementlist Loop EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // forstm ::= For Id Asigna Entero To Entero EndLine statementlist Next Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // forstm ::= For Id Asigna Entero To Entero EndLine statementlist Next Id EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elseifstm ::= ElseIf condicion Then 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elseifstm ::= ElseIf condicion Then EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elseifstm ::= ElseIf condicion Then elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseifstm ::= ElseIf condicion Then EndLine elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elsestm ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elsestm ::= Else EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elselist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elselist ::= elseifstm elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elselist ::= elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elselist ::= elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifstm ::= If condicion Then 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifstm ::= If condicion Then EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iflist ::= ifstm statementlist elselist EndIf 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iflist ::= ifstm statementlist elselist EndIf EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decvar ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variables ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variables ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= callfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= operador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= dostm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= forstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= iflist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= decvarstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statementlist ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listdec ::= listdec Coma decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listdec ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listdecvar ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listdecvar ::= decvar EndLine listdecvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listdecvar ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decvarstm ::= Dim listdec Asigna Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decvarstm ::= Dim listdec Asigna Entero EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decvarstm ::= Dim listdec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decvarstm ::= Dim listdec EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // callfunction ::= Call sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sfunction ::= Id ParIzq ParDer EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decfunction ::= error 
            {
              Object RESULT =null;
		 erroresSintacticos2.add(new Visual_Error(0,0,"Se esperaba solo un metodo"));
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decfunction ::= ffunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decfunction ::= Sub sfunction functionbody EndSub 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decfunction ::= Sub sfunction functionbody EndSub EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // types ::= Type Id EndLine listdecvar EndType EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("types",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionlist ::= mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionlist ::= functionlist decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionbody ::= statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionbody",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= expression 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

