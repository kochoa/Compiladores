
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 18 09:23:03 CST 2014
//----------------------------------------------------

package compiladores;

import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 18 09:23:03 CST 2014
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\010\003\000\002\014\004\000\002\043\003" +
    "\000\002\055\010\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\057\012\000\002\057\011\000\002" +
    "\060\015\000\002\060\014\000\002\003\005\000\002\003" +
    "\004\000\002\003\007\000\002\003\006\000\002\056\003" +
    "\000\002\056\005\000\002\056\002\000\002\005\003\000" +
    "\002\005\005\000\002\030\003\000\002\030\004\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\044\003\000\002\044\003" +
    "\000\002\004\005\000\002\040\007\000\002\040\006\000" +
    "\002\032\006\000\002\032\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\004\000\002\034\002\000\002\033" +
    "\004\000\002\033\003\000\002\035\007\000\002\035\006" +
    "\000\002\035\006\000\002\035\005\000\002\041\015\000" +
    "\002\041\014\000\002\042\010\000\002\042\007\000\002" +
    "\042\010\000\002\042\007\000\002\013\012\000\002\013" +
    "\011\000\002\050\003\000\002\050\006\000\002\050\004" +
    "\000\002\047\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\005\000\002" +
    "\011\003\000\002\011\002\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\036\005\000" +
    "\002\037\003\000\002\037\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\051\005\000\002\053\004" +
    "\000\002\054\005\000\002\054\005\000\002\054\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\020\002\000\026\011\036\014\043\004\044" +
    "\012\046\013\106\006\001\002\000\006\036\014\106\006" +
    "\001\002\000\016\026\011\036\014\043\004\044\012\046" +
    "\013\106\006\001\002\000\032\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\047\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100" +
    "\uffb7\105\uffb7\112\uffb7\001\002\000\032\002\uffe5\026\uffe5" +
    "\036\uffe5\043\uffe5\044\uffe5\046\uffe5\052\uffe5\053\uffe5\055" +
    "\uffe5\062\uffe5\063\uffe5\106\uffe5\001\002\000\010\003\073" +
    "\036\014\106\006\001\002\000\004\106\054\001\002\000" +
    "\006\045\042\105\043\001\002\000\004\106\026\001\002" +
    "\000\032\021\uffb6\022\uffb6\023\uffb6\024\uffb6\047\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\105\uffb6\112\uffb6" +
    "\001\002\000\004\002\uffff\001\002\000\032\002\uffe4\026" +
    "\uffe4\036\uffe4\043\uffe4\044\uffe4\046\uffe4\052\uffe4\053\uffe4" +
    "\055\uffe4\062\uffe4\063\uffe4\106\uffe4\001\002\000\032\002" +
    "\uffe6\026\uffe6\036\uffe6\043\uffe6\044\uffe6\046\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\062\uffe6\063\uffe6\106\uffe6\001\002\000" +
    "\004\112\025\001\002\000\032\002\uffe8\026\uffe8\036\uffe8" +
    "\043\uffe8\044\uffe8\046\uffe8\052\uffe8\053\uffe8\055\uffe8\062" +
    "\uffe8\063\uffe8\106\uffe8\001\002\000\032\002\uffe7\026\uffe7" +
    "\036\uffe7\043\uffe7\044\uffe7\046\uffe7\052\uffe7\053\uffe7\055" +
    "\uffe7\062\uffe7\063\uffe7\106\uffe7\001\002\000\004\002\024" +
    "\001\002\000\004\002\001\001\002\000\010\003\uffae\036" +
    "\uffae\106\uffae\001\002\000\004\112\027\001\002\000\004" +
    "\036\030\001\002\000\004\051\031\001\002\000\004\036" +
    "\032\001\002\000\004\105\033\001\002\000\016\026\011" +
    "\036\014\043\004\044\012\046\013\106\006\001\002\000" +
    "\004\063\037\001\002\000\030\026\011\036\014\043\004" +
    "\044\012\046\013\052\uffea\053\uffea\055\uffea\062\uffea\063" +
    "\uffea\106\006\001\002\000\014\052\uffe9\053\uffe9\055\uffe9" +
    "\062\uffe9\063\uffe9\001\002\000\004\106\040\001\002\000" +
    "\034\002\uffd1\026\uffd1\036\uffd1\043\uffd1\044\uffd1\046\uffd1" +
    "\052\uffd1\053\uffd1\055\uffd1\062\uffd1\063\uffd1\105\041\106" +
    "\uffd1\001\002\000\032\002\uffd2\026\uffd2\036\uffd2\043\uffd2" +
    "\044\uffd2\046\uffd2\052\uffd2\053\uffd2\055\uffd2\062\uffd2\063" +
    "\uffd2\106\uffd2\001\002\000\004\105\050\001\002\000\016" +
    "\026\011\036\014\043\004\044\012\046\013\106\006\001" +
    "\002\000\004\062\045\001\002\000\004\045\046\001\002" +
    "\000\034\002\uffcd\026\uffcd\036\uffcd\043\uffcd\044\uffcd\046" +
    "\uffcd\052\uffcd\053\uffcd\055\uffcd\062\uffcd\063\uffcd\105\047" +
    "\106\uffcd\001\002\000\032\002\uffce\026\uffce\036\uffce\043" +
    "\uffce\044\uffce\046\uffce\052\uffce\053\uffce\055\uffce\062\uffce" +
    "\063\uffce\106\uffce\001\002\000\016\026\011\036\014\043" +
    "\004\044\012\046\013\106\006\001\002\000\004\062\052" +
    "\001\002\000\034\002\uffcf\026\uffcf\036\uffcf\043\uffcf\044" +
    "\uffcf\046\uffcf\052\uffcf\053\uffcf\055\uffcf\062\uffcf\063\uffcf" +
    "\105\053\106\uffcf\001\002\000\032\002\uffd0\026\uffd0\036" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\052\uffd0\053\uffd0\055\uffd0" +
    "\062\uffd0\063\uffd0\106\uffd0\001\002\000\004\025\065\001" +
    "\002\000\040\002\uffec\026\uffec\036\uffec\043\uffec\044\uffec" +
    "\046\uffec\052\uffec\053\uffec\055\uffec\062\uffec\063\uffec\105" +
    "\uffec\106\uffec\110\uffec\112\uffec\001\002\000\040\002\ufff2" +
    "\026\ufff2\036\ufff2\043\ufff2\044\ufff2\046\ufff2\052\ufff2\053" +
    "\ufff2\055\ufff2\062\ufff2\063\ufff2\105\060\106\ufff2\110\057" +
    "\112\061\001\002\000\004\106\054\001\002\000\032\002" +
    "\ufff3\026\ufff3\036\ufff3\043\ufff3\044\ufff3\046\ufff3\052\ufff3" +
    "\053\ufff3\055\ufff3\062\ufff3\063\ufff3\106\ufff3\001\002\000" +
    "\004\036\062\001\002\000\034\002\ufff0\026\ufff0\036\ufff0" +
    "\043\ufff0\044\ufff0\046\ufff0\052\ufff0\053\ufff0\055\ufff0\062" +
    "\ufff0\063\ufff0\105\063\106\ufff0\001\002\000\032\002\ufff1" +
    "\026\ufff1\036\ufff1\043\ufff1\044\ufff1\046\ufff1\052\ufff1\053" +
    "\ufff1\055\ufff1\062\ufff1\063\ufff1\106\ufff1\001\002\000\040" +
    "\002\uffeb\026\uffeb\036\uffeb\043\uffeb\044\uffeb\046\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\062\uffeb\063\uffeb\105\uffeb\106\uffeb" +
    "\110\uffeb\112\uffeb\001\002\000\012\032\066\033\067\034" +
    "\070\035\072\001\002\000\040\002\uffc6\026\uffc6\036\uffc6" +
    "\043\uffc6\044\uffc6\046\uffc6\052\uffc6\053\uffc6\055\uffc6\062" +
    "\uffc6\063\uffc6\105\uffc6\106\uffc6\110\uffc6\112\uffc6\001\002" +
    "\000\040\002\uffc5\026\uffc5\036\uffc5\043\uffc5\044\uffc5\046" +
    "\uffc5\052\uffc5\053\uffc5\055\uffc5\062\uffc5\063\uffc5\105\uffc5" +
    "\106\uffc5\110\uffc5\112\uffc5\001\002\000\040\002\uffc4\026" +
    "\uffc4\036\uffc4\043\uffc4\044\uffc4\046\uffc4\052\uffc4\053\uffc4" +
    "\055\uffc4\062\uffc4\063\uffc4\105\uffc4\106\uffc4\110\uffc4\112" +
    "\uffc4\001\002\000\040\002\uffe1\026\uffe1\036\uffe1\043\uffe1" +
    "\044\uffe1\046\uffe1\052\uffe1\053\uffe1\055\uffe1\062\uffe1\063" +
    "\uffe1\105\uffe1\106\uffe1\110\uffe1\112\uffe1\001\002\000\040" +
    "\002\uffc3\026\uffc3\036\uffc3\043\uffc3\044\uffc3\046\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\062\uffc3\063\uffc3\105\uffc3\106\uffc3" +
    "\110\uffc3\112\uffc3\001\002\000\014\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\105\uffab\001\002\000\012\021\103\022\101" +
    "\023\100\024\102\001\002\000\014\021\103\022\101\023" +
    "\100\024\102\105\077\001\002\000\006\036\014\106\006" +
    "\001\002\000\032\002\uffaf\026\uffaf\036\uffaf\043\uffaf\044" +
    "\uffaf\046\uffaf\052\uffaf\053\uffaf\055\uffaf\062\uffaf\063\uffaf" +
    "\106\uffaf\001\002\000\006\036\uffa8\106\uffa8\001\002\000" +
    "\006\036\uffa9\106\uffa9\001\002\000\006\036\uffa7\106\uffa7" +
    "\001\002\000\006\036\uffaa\106\uffaa\001\002\000\014\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\105\uffac\001\002\000\006" +
    "\036\014\106\006\001\002\000\014\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\105\uffad\001\002\000\010\052\112\053\111" +
    "\055\uffd9\001\002\000\006\052\112\055\uffdb\001\002\000" +
    "\006\036\014\106\006\001\002\000\006\055\uffd7\105\117" +
    "\001\002\000\004\055\uffdc\001\002\000\004\055\115\001" +
    "\002\000\034\002\uffdf\026\uffdf\036\uffdf\043\uffdf\044\uffdf" +
    "\046\uffdf\052\uffdf\053\uffdf\055\uffdf\062\uffdf\063\uffdf\105" +
    "\116\106\uffdf\001\002\000\032\002\uffe0\026\uffe0\036\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\052\uffe0\053\uffe0\055\uffe0\062" +
    "\uffe0\063\uffe0\106\uffe0\001\002\000\004\055\uffd8\001\002" +
    "\000\004\047\132\001\002\000\016\074\123\075\124\076" +
    "\122\077\130\100\125\112\127\001\002\000\006\036\uffb1" +
    "\106\uffb1\001\002\000\006\036\uffb4\106\uffb4\001\002\000" +
    "\006\036\uffb5\106\uffb5\001\002\000\006\036\uffb3\106\uffb3" +
    "\001\002\000\006\036\014\106\006\001\002\000\006\036" +
    "\uffb0\106\uffb0\001\002\000\006\036\uffb2\106\uffb2\001\002" +
    "\000\004\047\uffb8\001\002\000\012\052\uffd3\053\111\055" +
    "\uffd3\105\134\001\002\000\006\052\uffd5\055\uffd5\001\002" +
    "\000\010\052\uffd4\053\111\055\uffd4\001\002\000\006\052" +
    "\uffd6\055\uffd6\001\002\000\004\055\uffda\001\002\000\004" +
    "\047\140\001\002\000\020\026\uffdd\036\uffdd\043\uffdd\044" +
    "\uffdd\046\uffdd\105\141\106\uffdd\001\002\000\016\026\uffde" +
    "\036\uffde\043\uffde\044\uffde\046\uffde\106\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\026\002\022\003\020\031\014\032\004\037" +
    "\017\040\021\041\016\042\006\051\015\053\007\001\001" +
    "\000\006\036\136\037\120\001\001\000\026\003\020\030" +
    "\106\031\034\032\004\037\017\040\021\041\016\042\006" +
    "\051\015\053\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\073\054\074\001\001\000\006\004\054" +
    "\005\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\020\030\033" +
    "\031\034\032\004\037\017\040\021\041\016\042\006\051" +
    "\015\053\007\001\001\000\002\001\001\000\026\003\020" +
    "\030\035\031\034\032\004\037\017\040\021\041\016\042" +
    "\006\051\015\053\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\020\030\043\031\034\032\004\037\017" +
    "\040\021\041\016\042\006\051\015\053\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\020\030\050\031\034\032\004\037" +
    "\017\040\021\041\016\042\006\051\015\053\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\104\001\001\000\004\052\075\001" +
    "\001\000\004\037\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\105\001\001\000\002" +
    "\001\001\000\010\033\112\034\113\035\107\001\001\000" +
    "\004\033\135\001\001\000\006\036\117\037\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\132\001\001\000\002\001\001" +
    "\000\004\035\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   
      	public void report_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error at line " + (cur_token.left+1) +", column " + (cur_token.right+1), null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {


	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comentario ::= com 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("comentario",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadorarit ::= Div 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorarit ::= Mult 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorarit ::= Resta 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorarit ::= Suma 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorarit",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorder ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorder ::= operadorder operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorder ::= operando operadorarit operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorder",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadorizq ::= operando Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorizq",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador ::= operadorizq operadorder EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorcomp ::= Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorcomp ::= Distinto 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorcomp ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadorcomp ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadorcomp ::= Menor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadorcomp ::= Mayor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operando ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operando ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= operando operadorcomp operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipos ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipos ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipos ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipos ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= ByVal decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= ByRef decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listparam ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listparam ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listparam ::= listparam Coma parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= Integer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= Char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // frase ::= str Concatenacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("frase",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fraselist ::= fraselist frase 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fraselist ::= fraselist frase GuionBajo EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fraselist ::= frase 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("fraselist",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mainstm ::= Sub Main ParIzq ParDer EndLine functionbody EndSub 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mainstm ::= Sub Main ParIzq ParDer EndLine functionbody EndSub EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dostm ::= Do EndLine statementlist Loop While 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dostm ::= Do EndLine statementlist Loop While EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dostm ::= Do While EndLine statementlist Loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dostm ::= Do While EndLine statementlist Loop EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // forstm ::= For Id Asigna Entero To Entero EndLine statementlist Next Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forstm ::= For Id Asigna Entero To Entero EndLine statementlist Next Id EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseifstm ::= ElseIf condicion Then 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elseifstm ::= ElseIf condicion Then EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseifstm ::= ElseIf condicion Then elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elseifstm ::= ElseIf condicion Then EndLine elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elsestm ::= Else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elsestm ::= Else EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elselist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elselist ::= elseifstm elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elselist ::= elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elselist ::= elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifstm ::= If condicion Then 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifstm ::= If condicion Then EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // iflist ::= ifstm statementlist elselist EndIf 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iflist ::= ifstm statementlist elselist EndIf EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decvar ::= Id As tipo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variables ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variables ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("variables",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= operador 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= dostm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= forstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iflist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= decvarstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementlist ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listdec ::= listdec Coma decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listdec ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listdecvar ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listdecvar ::= decvar EndLine listdecvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listdecvar ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdecvar",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decvarstm ::= Dim listdec Asigna Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decvarstm ::= Dim listdec Asigna Entero EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decvarstm ::= Dim listdec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decvarstm ::= Dim listdec EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ffunction ::= Function Id ParIzq listparam ParDer As tipo EndLine functionbody EndFunction EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sfunction ::= Sub Id ParIzq ParDer EndLine functionbody EndSub 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sfunction ::= Sub Id ParIzq ParDer EndLine functionbody EndSub EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decfunction ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decfunction ::= ffunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decfunction ::= sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // types ::= Type Id EndLine listdecvar EndType EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("types",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionlist ::= functionlist decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functionbody ::= statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionbody",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

