/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/compiladores/Visual.flex</tt>
 */
class Visual implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int str = 2;
  public static final int com = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\50\1\76\1\76\1\50\22\0\1\64\1\0\1\62"+
    "\3\0\1\61\1\75\1\72\1\73\1\70\1\67\1\55\1\66\1\0"+
    "\1\71\12\51\1\54\1\0\1\56\1\47\1\57\2\0\1\1\1\3"+
    "\1\11\1\14\1\21\1\26\2\46\1\23\2\46\1\33\1\46\1\35"+
    "\1\42\1\40\1\46\1\45\1\27\1\37\2\46\1\25\1\43\2\46"+
    "\1\0\1\63\1\0\1\60\1\74\1\0\1\7\1\20\1\30\1\22"+
    "\1\6\1\24\1\32\1\12\1\15\2\46\1\5\1\16\1\10\1\4"+
    "\1\34\1\44\1\13\1\2\1\31\1\17\1\41\1\46\1\36\2\46"+
    "\1\52\1\0\1\53\7\0\1\76\u1fa2\0\1\76\1\76\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\23\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\31\1\33\1\34\1\35\4\2"+
    "\1\36\7\2\1\37\14\2\1\40\2\2\1\41\2\2"+
    "\1\0\1\42\1\43\1\44\1\45\1\46\4\2\1\47"+
    "\1\2\1\50\1\2\1\51\1\2\1\52\2\2\1\53"+
    "\3\2\1\54\3\2\1\55\3\2\1\56\1\2\1\0"+
    "\1\2\1\57\1\60\1\2\1\61\1\0\1\62\7\2"+
    "\1\63\1\64\1\65\1\66\3\2\1\0\2\2\4\0"+
    "\1\2\1\0\1\2\1\67\1\70\4\2\1\71\2\2"+
    "\1\0\1\2\1\72\1\73\3\0\1\2\1\0\2\2"+
    "\1\74\1\75\2\2\1\76\1\0\1\77\1\0\1\100"+
    "\1\0\1\101\1\0\1\102\1\2\1\0\1\103\1\104"+
    "\1\105\2\0\1\101\1\106\1\0\1\107\2\0\1\110"+
    "\1\0\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\275"+
    "\0\u05a9\0\u05e8\0\u0627\0\275\0\275\0\275\0\u0666\0\u06a5"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\u06e4"+
    "\0\u0723\0\275\0\u013b\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u013b"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u013b\0\u0d4a\0\u0d89\0\u013b"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\275\0\275\0\275\0\275\0\u013b"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u013b\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u013b\0\u103e\0\u013b\0\u107d\0\u10bc\0\u013b\0\u10fb\0\u113a"+
    "\0\u1179\0\u013b\0\u11b8\0\u11f7\0\u1236\0\u013b\0\u1275\0\u12b4"+
    "\0\u12f3\0\u013b\0\u1332\0\u1371\0\u13b0\0\u013b\0\u013b\0\u13ef"+
    "\0\u013b\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u013b\0\u013b\0\u013b\0\u013b\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u013b\0\u013b\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u013b\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u013b\0\275"+
    "\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u013b\0\u1d88\0\u1dc7\0\u013b\0\u1e06\0\u013b\0\u1e45\0\275"+
    "\0\u1e84\0\u013b\0\u1ec3\0\u013b\0\u1f02\0\u1f41\0\u013b\0\u013b"+
    "\0\275\0\u1f80\0\u1fbf\0\275\0\u013b\0\u1ffe\0\275\0\u203d"+
    "\0\u207c\0\275\0\u20bb\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\5\6\1\10\2\6\1\11"+
    "\4\6\1\12\1\6\1\13\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\1\6\1\21\1\6\1\22\1\6\1\23"+
    "\1\24\1\6\1\25\1\26\1\6\1\27\1\6\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\2\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\0\50\56\1\0"+
    "\11\56\1\57\1\60\12\56\1\0\50\56\1\61\24\56"+
    "\1\62\101\0\1\6\1\63\5\6\1\64\36\6\2\0"+
    "\1\6\22\0\1\6\3\0\46\6\2\0\1\6\22\0"+
    "\1\6\3\0\3\6\1\65\42\6\2\0\1\6\22\0"+
    "\1\6\3\0\6\6\1\66\2\6\1\67\34\6\2\0"+
    "\1\6\22\0\1\6\3\0\3\6\1\70\10\6\1\71"+
    "\31\6\2\0\1\6\22\0\1\6\3\0\4\6\1\72"+
    "\2\6\1\73\25\6\1\74\5\6\1\75\2\6\2\0"+
    "\1\6\22\0\1\6\3\0\7\6\1\76\5\6\1\77"+
    "\5\6\1\100\22\6\2\0\1\6\22\0\1\6\3\0"+
    "\6\6\1\101\37\6\2\0\1\6\22\0\1\6\3\0"+
    "\11\6\1\102\34\6\2\0\1\6\22\0\1\6\3\0"+
    "\3\6\1\103\1\104\11\6\1\105\27\6\2\0\1\6"+
    "\22\0\1\6\3\0\5\6\1\106\10\6\1\107\11\6"+
    "\1\110\15\6\2\0\1\6\22\0\1\6\3\0\12\6"+
    "\1\111\33\6\2\0\1\6\22\0\1\6\3\0\3\6"+
    "\1\112\42\6\2\0\1\6\22\0\1\6\3\0\3\6"+
    "\1\113\1\6\1\114\40\6\2\0\1\6\22\0\1\6"+
    "\3\0\3\6\1\115\5\6\1\116\34\6\2\0\1\6"+
    "\22\0\1\6\3\0\12\6\1\117\33\6\2\0\1\6"+
    "\22\0\1\6\3\0\12\6\1\120\33\6\2\0\1\6"+
    "\22\0\1\6\3\0\3\6\1\121\42\6\2\0\1\6"+
    "\22\0\1\6\3\0\5\6\1\122\40\6\2\0\1\6"+
    "\22\0\1\6\52\0\1\31\77\0\1\32\32\0\1\123"+
    "\140\0\1\124\7\0\1\125\66\0\1\126\111\0\1\127"+
    "\64\0\1\61\27\0\21\6\1\130\24\6\2\0\1\6"+
    "\22\0\1\6\3\0\3\6\1\131\42\6\2\0\1\6"+
    "\22\0\1\6\3\0\1\6\1\132\44\6\2\0\1\6"+
    "\22\0\1\6\3\0\6\6\1\133\37\6\2\0\1\6"+
    "\22\0\1\6\3\0\16\6\1\134\27\6\2\0\1\6"+
    "\22\0\1\6\3\0\15\6\1\135\30\6\2\0\1\6"+
    "\22\0\1\6\3\0\1\6\1\136\44\6\2\0\1\6"+
    "\22\0\1\6\3\0\21\6\1\137\24\6\2\0\1\6"+
    "\22\0\1\6\3\0\14\6\1\140\31\6\2\0\1\6"+
    "\22\0\1\6\3\0\40\6\1\141\5\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\142\15\6\2\0\1\6"+
    "\22\0\1\6\3\0\33\6\1\143\12\6\2\0\1\6"+
    "\22\0\1\6\3\0\4\6\1\144\41\6\2\0\1\6"+
    "\22\0\1\6\3\0\14\6\1\145\31\6\2\0\1\6"+
    "\22\0\1\6\3\0\12\6\1\146\33\6\2\0\1\6"+
    "\22\0\1\6\3\0\3\6\1\147\42\6\2\0\1\6"+
    "\22\0\1\6\3\0\7\6\1\150\36\6\2\0\1\6"+
    "\22\0\1\6\3\0\4\6\1\151\41\6\2\0\1\6"+
    "\22\0\1\6\3\0\17\6\1\152\26\6\2\0\1\6"+
    "\22\0\1\6\3\0\12\6\1\153\33\6\2\0\1\6"+
    "\22\0\1\6\3\0\16\6\1\154\27\6\2\0\1\6"+
    "\22\0\1\6\3\0\3\6\1\155\42\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\156\15\6\2\0\1\6"+
    "\22\0\1\6\3\0\35\6\1\157\10\6\2\0\1\6"+
    "\22\0\1\6\3\0\5\6\1\160\40\6\2\0\1\6"+
    "\22\0\1\6\3\0\14\6\1\161\31\6\2\0\1\6"+
    "\22\0\1\6\3\0\12\6\1\162\33\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\163\15\6\2\0\1\6"+
    "\22\0\1\6\10\0\1\164\71\0\4\6\1\165\41\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\166\40\6"+
    "\2\0\1\6\22\0\1\6\3\0\12\6\1\167\33\6"+
    "\2\0\1\6\22\0\1\6\3\0\17\6\1\170\26\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\171\40\6"+
    "\2\0\1\6\22\0\1\6\3\0\46\6\2\0\1\6"+
    "\12\0\1\172\7\0\1\6\3\0\30\6\1\173\15\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\174\40\6"+
    "\2\0\1\6\22\0\1\6\3\0\1\6\1\154\44\6"+
    "\2\0\1\6\22\0\1\6\3\0\4\6\1\175\41\6"+
    "\2\0\1\6\22\0\1\6\3\0\6\6\1\176\37\6"+
    "\2\0\1\6\22\0\1\6\3\0\27\6\1\177\16\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\200\40\6"+
    "\2\0\1\6\22\0\1\6\3\0\14\6\1\201\1\6"+
    "\1\202\27\6\2\0\1\6\22\0\1\6\3\0\5\6"+
    "\1\203\40\6\2\0\1\6\22\0\1\6\3\0\33\6"+
    "\1\204\12\6\2\0\1\6\22\0\1\6\3\0\30\6"+
    "\1\205\15\6\2\0\1\6\22\0\1\6\3\0\7\6"+
    "\1\206\36\6\2\0\1\6\22\0\1\6\3\0\7\6"+
    "\1\207\30\6\1\210\5\6\2\0\1\6\22\0\1\6"+
    "\3\0\16\6\1\211\27\6\2\0\1\6\22\0\1\6"+
    "\33\0\1\212\46\0\5\6\1\213\40\6\2\0\1\6"+
    "\22\0\1\6\3\0\4\6\1\214\41\6\2\0\1\6"+
    "\22\0\1\6\25\0\1\215\1\0\1\216\1\217\1\220"+
    "\34\0\1\172\13\0\25\6\1\221\20\6\2\0\1\6"+
    "\12\0\1\222\7\0\1\6\3\0\31\6\1\223\14\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\224\40\6"+
    "\2\0\1\6\22\0\1\6\3\0\30\6\1\225\15\6"+
    "\2\0\1\6\22\0\1\6\3\0\30\6\1\226\15\6"+
    "\2\0\1\6\22\0\1\6\3\0\27\6\1\227\16\6"+
    "\2\0\1\6\22\0\1\6\3\0\7\6\1\230\36\6"+
    "\2\0\1\6\22\0\1\6\3\0\27\6\1\231\16\6"+
    "\2\0\1\6\22\0\1\6\3\0\30\6\1\232\15\6"+
    "\2\0\1\6\22\0\1\6\3\0\6\6\1\233\37\6"+
    "\2\0\1\6\22\0\1\6\3\0\12\6\1\234\33\6"+
    "\2\0\1\6\22\0\1\6\15\0\1\235\64\0\6\6"+
    "\1\236\37\6\2\0\1\6\22\0\1\6\3\0\5\6"+
    "\1\237\40\6\2\0\1\6\22\0\1\6\26\0\1\240"+
    "\64\0\1\241\70\0\1\242\100\0\1\243\71\0\3\6"+
    "\1\244\42\6\2\0\1\6\22\0\1\6\30\0\1\245"+
    "\35\0\1\222\13\0\5\6\1\246\40\6\2\0\1\6"+
    "\22\0\1\6\3\0\14\6\1\247\31\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\250\15\6\2\0\1\6"+
    "\22\0\1\6\3\0\31\6\1\251\14\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\252\15\6\2\0\1\6"+
    "\22\0\1\6\3\0\30\6\1\253\15\6\2\0\1\6"+
    "\22\0\1\6\3\0\7\6\1\254\36\6\2\0\1\6"+
    "\22\0\1\6\11\0\1\255\70\0\7\6\1\256\36\6"+
    "\2\0\1\6\22\0\1\6\17\0\1\257\74\0\1\260"+
    "\70\0\1\261\72\0\12\6\1\262\33\6\2\0\1\6"+
    "\22\0\1\6\6\0\1\263\73\0\12\6\1\264\33\6"+
    "\2\0\1\6\22\0\1\6\3\0\3\6\1\265\42\6"+
    "\2\0\1\6\22\0\1\6\3\0\46\6\2\0\1\6"+
    "\12\0\1\266\7\0\1\6\3\0\1\6\1\267\44\6"+
    "\2\0\1\6\22\0\1\6\3\0\5\6\1\270\40\6"+
    "\2\0\1\6\22\0\1\6\55\0\1\271\30\0\1\272"+
    "\77\0\1\273\103\0\1\274\64\0\7\6\1\275\36\6"+
    "\2\0\1\6\22\0\1\6\13\0\1\276\52\0\1\266"+
    "\20\0\1\277\120\0\1\300\55\0\1\301\120\0\1\302"+
    "\47\0\1\303\102\0\1\304\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8442];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\23\1\1\11\3\1\3\11\2\1\17\11"+
    "\2\1\1\11\40\1\1\0\4\11\34\1\1\0\5\1"+
    "\1\0\17\1\1\0\2\1\4\0\1\1\1\0\12\1"+
    "\1\0\2\1\1\11\3\0\1\1\1\0\7\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\11\2\0\1\11\1\1\1\0\1\11\2\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	String st;
	private Symbol symbol(int type) {
    	return new Symbol(type, yyline, yycolumn);
  	}
  	private Symbol symbol(int type, Object value) {
    	return new Symbol(type, yyline, yycolumn, value);
  	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Visual(java.io.Reader in) {
  	st = "";
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Visual(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error Lexico. Fila: "+ (yyline+1) +" Columna: " + (yycolumn+1) );
          }
        case 74: break;
        case 2: 
          { return symbol(sym.Id);
          }
        case 75: break;
        case 3: 
          { return symbol(sym.Asigna);
          }
        case 76: break;
        case 4: 
          { return symbol(sym.EndLine);
          }
        case 77: break;
        case 5: 
          { return symbol(sym.Entero);
          }
        case 78: break;
        case 6: 
          { return symbol(sym.LlaveDer);
          }
        case 79: break;
        case 7: 
          { return symbol(sym.LlaveIzq);
          }
        case 80: break;
        case 8: 
          { return symbol(sym.DosPuntos);
          }
        case 81: break;
        case 9: 
          { return symbol(sym.Coma);
          }
        case 82: break;
        case 10: 
          { return symbol(sym.Menor);
          }
        case 83: break;
        case 11: 
          { return symbol(sym.Mayor);
          }
        case 84: break;
        case 12: 
          { return symbol(sym.Potencia);
          }
        case 85: break;
        case 13: 
          { return symbol(sym.Concatenacion);
          }
        case 86: break;
        case 14: 
          { yybegin(str);
          }
        case 87: break;
        case 15: 
          { return symbol(sym.DiviEntera);
          }
        case 88: break;
        case 16: 
          { 
          }
        case 89: break;
        case 17: 
          { return symbol(sym.Menos);
          }
        case 90: break;
        case 18: 
          { return symbol(sym.Suma);
          }
        case 91: break;
        case 19: 
          { return symbol(sym.Mult);
          }
        case 92: break;
        case 20: 
          { return symbol(sym.Div);
          }
        case 93: break;
        case 21: 
          { return symbol(sym.ParIzq);
          }
        case 94: break;
        case 22: 
          { return symbol(sym.ParDer);
          }
        case 95: break;
        case 23: 
          { return symbol(sym.GuionBajo);
          }
        case 96: break;
        case 24: 
          { yybegin(com);
          }
        case 97: break;
        case 25: 
          { st+=yytext();
          }
        case 98: break;
        case 26: 
          { System.out.println("String: " + st);st="";yybegin(YYINITIAL);
          }
        case 99: break;
        case 27: 
          { System.out.println("Comentario");yybegin(YYINITIAL);
          }
        case 100: break;
        case 28: 
          { System.out.println("String");yybegin(YYINITIAL);
          }
        case 101: break;
        case 29: 
          { return symbol(sym.As);
          }
        case 102: break;
        case 30: 
          { return symbol(sym.Do);
          }
        case 103: break;
        case 31: 
          { return symbol(sym.If);
          }
        case 104: break;
        case 32: 
          { return symbol(sym.To);
          }
        case 105: break;
        case 33: 
          { return symbol(sym.Or);
          }
        case 106: break;
        case 34: 
          { return symbol(sym.MenorIgual);
          }
        case 107: break;
        case 35: 
          { return symbol(sym.Distinto);
          }
        case 108: break;
        case 36: 
          { return symbol(sym.MayorIgual);
          }
        case 109: break;
        case 37: 
          { st+="\"";
          }
        case 110: break;
        case 38: 
          { return symbol(sym.And);
          }
        case 111: break;
        case 39: 
          { return symbol(sym.Dim);
          }
        case 112: break;
        case 40: 
          { return symbol(sym.End);
          }
        case 113: break;
        case 41: 
          { return symbol(sym.Eqv);
          }
        case 114: break;
        case 42: 
          { return symbol(sym.Imp);
          }
        case 115: break;
        case 43: 
          { return symbol(sym.For);
          }
        case 116: break;
        case 44: 
          { return symbol(sym.Sub);
          }
        case 117: break;
        case 45: 
          { return symbol(sym.Not);
          }
        case 118: break;
        case 46: 
          { return symbol(sym.Xor);
          }
        case 119: break;
        case 47: 
          { return symbol(sym.Case);
          }
        case 120: break;
        case 48: 
          { return symbol(sym.Char);
          }
        case 121: break;
        case 49: 
          { return symbol(sym.Else);
          }
        case 122: break;
        case 50: 
          { return symbol(sym.Exit);
          }
        case 123: break;
        case 51: 
          { return symbol(sym.TipoBoolean);
          }
        case 124: break;
        case 52: 
          { return symbol(sym.Loop);
          }
        case 125: break;
        case 53: 
          { return symbol(sym.Next);
          }
        case 126: break;
        case 54: 
          { return symbol(sym.Then);
          }
        case 127: break;
        case 55: 
          { return symbol(sym.While);
          }
        case 128: break;
        case 56: 
          { return symbol(sym.Float);
          }
        case 129: break;
        case 57: 
          { return symbol(sym.Print);
          }
        case 130: break;
        case 58: 
          { return symbol(sym.Double);
          }
        case 131: break;
        case 59: 
          { return symbol(sym.EndIf);
          }
        case 132: break;
        case 60: 
          { return symbol(sym.Select);
          }
        case 133: break;
        case 61: 
          { return symbol(sym.String);
          }
        case 134: break;
        case 62: 
          { return symbol(sym.Return);
          }
        case 135: break;
        case 63: 
          { return symbol(sym.Boolean);
          }
        case 136: break;
        case 64: 
          { return symbol(sym.EndFor);
          }
        case 137: break;
        case 65: 
          { return symbol(sym.ExitFor);
          }
        case 138: break;
        case 66: 
          { return symbol(sym.Integer);
          }
        case 139: break;
        case 67: 
          { return symbol(sym.Structs);
          }
        case 140: break;
        case 68: 
          { return symbol(sym.Private);
          }
        case 141: break;
        case 69: 
          { return symbol(sym.Ch);
          }
        case 142: break;
        case 70: 
          { return symbol(sym.Function);
          }
        case 143: break;
        case 71: 
          { return symbol(sym.EndWhile);
          }
        case 144: break;
        case 72: 
          { return symbol(sym.EndSelect);
          }
        case 145: break;
        case 73: 
          { return symbol(sym.SelectCase);
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
