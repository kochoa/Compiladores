package compiladores;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;


/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return super.scanner.next_token(); :};
scan with {: return super.getScanner().next_token(); :};

parser code{:
    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   @Override
      	public void syntax_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error con:"+ cur_token.value + " en la linea: " + (cur_token.left+1) +", columna: " + (cur_token.right+1),null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}

:}

action code {:
	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}

:};


/*-* terminal symbols */
//estos son los que no estoy utilizando
terminal Potencia, DosPuntos;

//estos son los terminales que estoy utilizando
terminal Suma, Resta, Mult, Div,Return,Structs,EndFor,ExitFor,Private, EndWhile, EndSelect, EndCase;
terminal As, Dim, Main, ByVal,ByRef,Float,Double,Select,Concatenacion, DiviEntera, GuionBajo, Eqv, Imp, Step,Exit,Case;
terminal Char, Integer, String, Boolean, Entero, Type, Ch, str, com,SelectCase;
terminal If, Do, While, For, Then, To, Else, ElseIf, End, EndIf, EndSub, EndFunction, EndType, Loop, Next;
terminal Sub, Print, Punto, LlaveDer, LlaveIzq;
terminal ParIzq, ParDer, Input;
terminal Menor, Mayor, Distinto, MenorIgual, MayorIgual, Not, And, Or, Xor;
terminal EndLine, Id, Coma, Call;
terminal Asigna, TipoBoolean, Function;

/*-* Non-non terminal symbols **/
non terminal  ini, decvarstm, decvar, listdec, tipo, decfunction, functionbody, listparam, parametros, mainstm;
non terminal functionlist, operadorcomp, escribir, leer, impre, ret;
non terminal tipos, statementlist, statement, ifstm, elsestm, elselist, elseifstm, condicion, operando, iflist;
non terminal forstm, dostm, exp, expMat, endtypes, tipotype, final, dec;
non terminal types, sfunction, ffunction, callfunction, expLog,decvarlist,dectype;



/* precedence */
//precedence left Igual;
precedence left Suma, Resta;
precedence left Mult, Div;
precedence left Potencia;

start with ini;

ini ::=  /*EndLine decvarstm
       | decvarstm
       | decvarstm decfunction
       | decfunction
       | decvarstm decfunction iflist forstm dostm
       | mainstm
       | functionlist mainstm functionlist
       | decvarstm functionlist mainstm functionlist 
       | iflist
       | forstm
       | dostm
       | comentario
       | fraselist
       | operador
       |types */
       |dec functionlist mainstm
       |dec functionlist error:err{: erroresSintacticos2.add(new Visual_Error(errleft+1,errright+1,"Se Esperaba un Main en la Fila: " + errleft));:}
       |dec mainstm functionlist
       |dec functionlist mainstm functionlist
       |dec functionlist error:err functionlist{: erroresSintacticos2.add(new Visual_Error(errleft+1,errright+1,"Se Esperaba un Main"));:}
       |dec mainstm
       |error;
 
/*-*
 * GRAMMAR RULES
 */
functionbody ::=  statementlist;

functionlist        ::=functionlist decfunction|decfunction;

types       ::= Type Id EndLine endtypes;

endtypes    ::= decvarlist EndType EndLine
                |decvarlist EndType;

decfunction           ::= Sub sfunction functionbody EndSub final
                         |ffunction
                         |types
                         ;

escribir    ::= Print impre final;
impre       ::= Id|Id ParIzq listparam ParDer|str|Ch;

leer        ::= Input ParIzq Id ParDer final;
sfunction ::= Id ParIzq listparam ParDer EndLine
             ;

ffunction ::=Function Id ParIzq listparam ParDer As tipo EndLine functionbody ret EndFunction final;

ret     ::= Return operando final| Return Id ParIzq listparam ParDer final|;

callfunction ::= Call sfunction|sfunction;

decvarstm             ::= Dim error:er{:erroresSintacticos2.add(new Visual_Error(erleft,erright,"Token no esperado: Dim"));:}
                       |Dim listdec final
                       |Dim listdec Asigna Entero final
                       ;

decvarlist          ::= dectype EndLine decvarlist|;

dectype             ::= Id As tipo
                    |Id As Id;

listdec            ::= decvar
                       |listdec Coma decvar ;

statementlist           ::= statement
                           |statement statementlist
                           ;

dec             ::= decvarstm dec|;

statement            ::= decvarstm
                        |iflist
                        |forstm
                        |dostm
                        |tipotype
                        |escribir
                        |leer
                        |expMat
                        |callfunction;

tipotype    ::= Id Punto Id final;

decvar             ::= Id As tipo;
                  
// falta agregarle las statement
iflist              ::=ifstm statementlist elselist EndIf final;

ifstm              ::= If expLog Then final;

elselist           ::=  elsestm
                       |elseifstm 
                       | ;

elsestm            ::= Else final statementlist ;
                      
elseifstm          ::=  ElseIf expLog Then final statementlist elselist ;
                      
// falta agregarle el statement
forstm  ::= For Id Asigna  Entero To Entero final statementlist Next Id final;

//falta agregarle las statement y expressiones
dostm            ::= Do While expLog final statementlist Loop final
                    |Do expLog final statementlist Loop While final;

final   ::= EndLine|;

// falta agregarle las sentencia tambien 
mainstm             ::= Sub Main ParIzq ParDer final  functionbody EndSub final;

tipo               ::= Char
                       |Integer
                       |String
                       |Boolean;


listparam           ::=  listparam Coma parametros
                        |parametros
                        | ;


parametros          ::= ByVal decvar
                        |ByRef decvar
                        |decvar
                        |operando
                        |Id ParIzq listparam ParDer;

tipos             ::=  Entero
                       |TipoBoolean
                       |Ch
                       |str;


condicion       ::= operando operadorcomp operando;


operando        ::= Id
                   |tipos;

operadorcomp          ::= Mayor
                         |Menor
                         |MayorIgual
                         |MenorIgual
                         |Distinto
                         |Asigna;

expLog     ::= condicion
            |Not ParIzq expLog ParDer
            |Not ParIzq expLog ParDer Or expLog
            |Not ParIzq expLog ParDer Xor expLog
            |Not ParIzq expLog ParDer And expLog
            |condicion Or expLog
            |condicion Xor expLog
            |condicion And expLog
            |ParIzq expLog ParDer
            |ParIzq expLog ParDer Or expLog
            |ParIzq expLog ParDer Xor expLog
            |ParIzq expLog ParDer And expLog
            |error:err{: erroresSintacticos2.add(new Visual_Error(0,0,"se Esperaba una condicion en la fila"+errleft+"en la columna" +errright));:} ;

expMat  ::= Id Asigna exp final
            |Id Asigna TipoBoolean final
            |Id Asigna str final;

exp     ::= Entero
            |Id
            |Id ParIzq listparam ParDer
            |exp Suma exp
            |exp Resta exp
            |exp Mult exp
            |exp Div exp
            |exp Potencia exp
            |ParIzq exp ParDer;