package compiladores;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;




/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return super.scanner.next_token(); :};
scan with {: return super.getScanner().next_token(); :};

parser code{:
        
      	public void syntax_error(Symbol cur_token) {
        report_error("Sytax error at line " + (cur_token.left+1) +", column " + cur_token.right, null);
    }

public void unrecovered_syntax_error(Symbol cur_token) throws
  java.lang.Exception {
  report_fatal_error("", null);
}

:}

/*-* terminal symbols */

terminal Igual, Suma, Resta, Mult, Div;
terminal As, Dim, Main, ByRef, ByVal;
terminal Char, Double, Float, Integer, String, Boolean, Entero, Ch;
terminal If, Do, While, For, Then, Select, Step, Case, SelectCase, To, Else, ElseIf, End, EndIf, EndWhile, EndFor, EndSelect, EndSub, Loop, Next, Exit, ExitFor;
terminal Structs, Sub, Private, Print;
terminal ParIzq, ParDer;
terminal Menor, Mayor, Distinto, Potencia, MenorIgual, MayorIgual, Menos, Mas, Por, Entre, DiviEntera, Not, And, Or, Xor, Eqv, Imp;
terminal EndLine, Id, DosPuntos, Concatenacion, Coma;
terminal Asigna, LlaveDer,  LlaveIzq, GuionBajo, TipoBoolean, Function, Return;

/*-* Non-non terminal symbols **/
non terminal  ini, var_selec, dec_stm, dec_var, list_dec,tipo_reser, statement, statement_list, function_stm; 
non terminal  if_stm, while_stm, for_stm, return_stm, do_stm;
non terminal  value, operador_comp, expression, negacion_exp, and_exp, not_exp,comp_exp, add_exp, multi_exp;
non terminal list_parm, function_body, function_list, main_stm, list_stm, parametro;
non terminal condicion, sentencia, sent_list, else_list, else_stm, else_if_stm;

/* precedence */
//precedence left Igual;
precedence left Suma, Resta;
precedence left Mult, Div;

start with ini;

ini ::= dec_stm function_list main_stm function_list
        |function_list main_stm function_list;
 
/*-*
 * GRAMMAR RULES
 */
function_list     ::= function_list function_stm
                      | ;

function_stm            ::= Sub Id ParIzq ParDer EndLine function_body EndSub EndLine
                            |Function Id ParIzq list_parm ParDer As tipo_reser EndLine function_body EndSub EndLine;

list_parm           ::= list_parm Coma parametro
                        |parametro
                        | ;
 

parametro      ::= ByRef dec_var 
                  |ByVal dec_var;
          

main_stm            ::= Sub Main ParIzq ParDer EndLine function_body EndSub EndLine;

function_body       ::= dec_stm list_stm
                      |list_stm;
                        

dec_stm             ::=Dim list_dec EndLine;
                       

dec_var             ::=var_selec As tipo_reser;
      
     
list_dec            ::= dec_var
                       |list_dec Coma dec_var;

if_stm              ::=If condicion Then sent_list EndIf
                       |If condicion Then sent_list else_list EndIf;
                       

else_list           ::= else_stm
                        |else_if_stm else_list
                        |else_if_stm ;

else_stm            ::= Else sent_list;

else_if_stm        ::= ElseIf sent_list;

for_stm           ::= For var_selec Asigna  expression To expression Next var_selec
                     |For var_selec Asigna  expression To expression ExitFor Next var_selec 
                     |For var_selec Asigna  expression To expression Step expression sent_list ExitFor Next var_selec;

                     
                       

 var_selec            ::=Id
                         |Ch;

 tipo_reser           ::=Char
                         |Integer
                         |String
                         |Boolean;

expression           ::=and_exp Or expression
                       |and_exp;



and_exp             ::=not_exp And and_exp
                       |not_exp;

not_exp             ::=Not comp_exp
                       |comp_exp;


comp_exp            ::= add_exp operador_comp add_exp
                        |add_exp;


add_exp              ::= multi_exp Suma add_exp
                         |multi_exp Resta add_exp
                         |multi_exp;


multi_exp            ::= negacion_exp Mult multi_exp
                        |negacion_exp Div multi_exp
                        |multi_exp;


negacion_exp         ::= Resta value
                        |value;

value                ::= ParIzq expression ParDer
                         |expression
                         |Integer
                         |String
                         |Char
                         |Boolean
                         |Id;


operador_comp          ::=Mayor
                         |Menor
                         |MayorIgual
                         |MenorIgual
                         |Distinto
                         |Asigna;





