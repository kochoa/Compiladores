package compiladores;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;


/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return super.scanner.next_token(); :};
scan with {: return super.getScanner().next_token(); :};

parser code{:
    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   
      	public void syntax_error(Symbol cur_token) {
        report_error("Sytax error at line " + (cur_token.left+1) +", column " + (cur_token.right+1), null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
 
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}

:}

action code {:
	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}
:};


/*-* terminal symbols */
//estos son los que no estoy utilizando
terminal Double, Float, Select, Case, SelectCase, EndWhile, EndSelect, Potencia, DiviEntera, Eqv, Imp, DosPuntos;

//estos son los terminales que estoy utilizando
terminal Igual, Suma, Resta, Mult, Div;
terminal As, Dim, Main, ByRef, ByVal;
terminal Char, Integer, String, Boolean, Entero, Type, Ch;
terminal If, Do, While, For, Then, Step, To, Else, ElseIf, End, EndIf, EndFor, EndSub, EndFunction, EndType, Loop, Next, Exit, ExitFor;
terminal Structs, Sub, Private, Print;
terminal ParIzq, ParDer;
terminal Menor, Mayor, Distinto, MenorIgual, MayorIgual, Menos, Mas, Por, Entre, Not, And, Or, Xor;
terminal EndLine, Id, Concatenacion, Coma;
terminal Asigna, LlaveDer,  LlaveIzq, GuionBajo, TipoBoolean, Function, Return;

/*-* Non-non terminal symbols **/
non terminal  ini, decstm, decvar, listdec, tipo, functionstm, functionbody, listparam, parametros, mainstm;
non terminal functionlist;
//var_selec, dec_var, list_dec, statement, statement_list, function_stm; 
//non terminal  if_stm, for_stm, return_stm, do_stm;
//non terminal  value, operador_comp, expression, negacion_exp, and_exp, not_exp,comp_exp, add_exp, multi_exp;
//non terminal  function_body, function_list, main_stm, parametro;
//non terminal  sentencia, sent_list, else_list, else_stm, else_if_stm;

/* precedence */
//precedence left Igual;
precedence left Suma, Resta;
precedence left Mult, Div;

start with ini;

ini ::= decstm
       | decstm functionstm
       | functionstm
       | mainstm
       | functionlist mainstm functionlist
       | decstm functionlist mainstm functionlist 
       | ;
 
/*-*
 * GRAMMAR RULES
 */
decstm             ::= Dim listdec EndLine
                       |Dim listdec
                       |Dim listdec EndLine decstm;
                       
decvar             ::= Id As tipo;

listdec            ::= decvar
                       |listdec Coma decvar ;

tipo               ::= Char
                       |Integer
                       |String
                       |Boolean;


functionstm            ::= Sub Id ParIzq ParDer EndLine functionbody EndSub EndLine
                          |Sub Id ParIzq ParDer EndLine functionbody EndSub
                          |Function Id ParIzq listparam ParDer As tipo EndLine functionbody  EndFunction EndLine
                          |Function Id ParIzq listparam ParDer As tipo EndLine functionbody  EndFunction;


functionbody        ::=decstm;

listparam           ::= listparam Coma parametros
                        |parametros
                        | ;


parametros          ::= ByRef decvar
                        |ByVal decvar;

mainstm             ::= Sub Main ParIzq ParDer EndLine  EndSub EndLine
                       |Sub Main ParIzq ParDer EndLine  EndSub;


functionlist        ::=functionlist functionstm;
