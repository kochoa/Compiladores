package compiladores;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.ArrayList;


/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return super.scanner.next_token(); :};
scan with {: return super.getScanner().next_token(); :};

parser code{:
    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   
      	public void report_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error at line " + (cur_token.left+1) +", column " + (cur_token.right+1), null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));  
}

:}

action code {:
	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error1(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_error2(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}
:};


/*-* terminal symbols */
//estos son los que no estoy utilizando
terminal Double, Float, Select, Case, SelectCase, EndWhile, EndSelect, Potencia, DiviEntera, Eqv, Imp, DosPuntos;

//estos son los terminales que estoy utilizando
terminal Igual, Suma, Resta, Mult, Div;
terminal As, Dim, Main, ByRef, ByVal;
terminal Char, Integer, String, Boolean, Entero, Type, Ch, str, com;
terminal If, Do, While, For, Then, Step, To, Else, ElseIf, End, EndIf, EndFor, EndSub, EndFunction, EndType, Loop, Next, Exit, ExitFor;
terminal Structs, Sub, Private, Print;
terminal ParIzq, ParDer;
terminal Menor, Mayor, Distinto, MenorIgual, MayorIgual, Not, And, Or, Xor;
terminal EndLine, Id, Concatenacion, Coma, Call;
terminal Asigna, LlaveDer,  LlaveIzq, GuionBajo, TipoBoolean, Function, Return;

/*-* Non-non terminal symbols **/
non terminal  ini, decvarstm, decvar, listdec, tipo, decfunction, functionbody, listparam, parametros, mainstm;
non terminal functionlist, expression, andexp, notexp, compexp, addexp, multiexp, negacionexp,value, operadorcomp;
non terminal asignar, tipos, statementlist, statement, ifstm, elsestm, elselist, elseifstm, condicion, operando, iflist;
non terminal forstm, dostm, function, variables, varasignacion, comentario, frase, fraselist;
non terminal operador, operadorarit, operadorizq, operadorder, types, listdecvar, sfunction, ffunction, callfunction;



/* precedence */
//precedence left Igual;
precedence left Suma, Resta;
precedence left Mult, Div;

start with ini;

ini ::=  /*EndLine decvarstm
       | decvarstm
       | decvarstm decfunction
       | decfunction
       | decvarstm decfunction iflist forstm dostm
       | mainstm
       | functionlist mainstm functionlist
       | decvarstm functionlist mainstm functionlist 
       | iflist
       | forstm
       | dostm
       | comentario
       | fraselist
       | operador
       |types */
       |functionlist
       | expression;
 
/*-*
 * GRAMMAR RULES
 */
functionbody ::=  statementlist;

functionlist        ::=functionlist decfunction|mainstm;

types       ::= Type Id EndLine listdecvar EndType EndLine;

decfunction           ::= Sub sfunction functionbody EndSub EndLine
                         |Sub sfunction functionbody EndSub
                         |ffunction
                         |error{: erroresSintacticos2.add(new Visual_Error(0,0,"Se esperaba solo un metodo"));:};


sfunction ::= Id ParIzq ParDer EndLine 
             ;

ffunction ::=Function Id ParIzq listparam ParDer As tipo EndLine  functionbody EndFunction EndLine
            |Function Id ParIzq listparam ParDer As tipo EndLine functionbody  EndFunction;


callfunction ::= Call sfunction;

decvarstm             ::=Dim listdec EndLine
                       |Dim listdec
                       |Dim listdec Asigna Entero EndLine
                       |Dim listdec Asigna Entero;
                       
listdecvar            ::= decvar
                         |decvar EndLine listdecvar|;

listdec            ::= decvar
                       |listdec Coma decvar ;

statementlist           ::= statement
                           |statement statementlist
                           ;

statement            ::= decvarstm
      //                  |asignar
                        |iflist
                        |forstm
                        |dostm
                        |operador
                        |callfunction;
variables ::= decvar
    //          |asignar
              | error;


decvar             ::= Id As tipo;

//asignar             ::= Id Asigna tipos
  //                      |Id error;



//no estoy muy segura de esto
//varasignacion ::= asigna expression;
                  
// falta agregarle las statement
iflist              ::=ifstm statementlist elselist EndIf EndLine
                       |ifstm statementlist elselist  EndIf;

ifstm              ::= If condicion Then EndLine
                       |If condicion Then;

elselist           ::=  elsestm
                       |elseifstm 
                       |elseifstm elsestm
                       | ;

elsestm            ::= Else EndLine
                      |Else;
                      
elseifstm          ::=  ElseIf condicion Then EndLine elseifstm
                       |ElseIf condicion Then elseifstm
                       |ElseIf condicion Then EndLine
                       |ElseIf condicion Then;
                      
// falta agregarle el statement
forstm  ::= For Id Asigna  Entero To Entero EndLine statementlist Next Id EndLine
           |For Id Asigna  Entero To Entero EndLine statementlist Next Id;

//falta agregarle las statement y expressiones
dostm            ::= Do While  EndLine statementlist Loop EndLine
                    |Do While  EndLine statementlist Loop
                    |Do EndLine statementlist Loop While EndLine
                    |Do EndLine statementlist Loop While;

// falta agregarle las sentencia tambien 
mainstm             ::= Sub Main ParIzq ParDer EndLine  functionbody EndSub EndLine
                       |Sub Main ParIzq ParDer EndLine  functionbody EndSub;

fraselist ::= frase
             |fraselist frase GuionBajo EndLine
             |fraselist frase;

frase   ::= str Concatenacion; 



tipo               ::= Char
                       |Integer
                       |String
                       |Boolean;


listparam           ::=  listparam Coma parametros
                        |parametros
                        | ;


parametros          ::=  ByRef decvar
                        |ByVal decvar
                        |decvar;

tipos             ::=  Entero
                       |TipoBoolean
                       |Ch
                       |str;


condicion       ::= operando operadorcomp operando;


operando        ::= Id
                   |Entero;

operadorcomp          ::= Mayor
                         |Menor
                         |MayorIgual
                         |MenorIgual
                         |Distinto
                         |Asigna;



operador ::=  operadorizq operadorder EndLine;


operadorizq   ::= operando Asigna;

operadorder ::= operando operadorarit operando
                |operadorder operadorarit operando
                | error;


operadorarit ::= Suma
            |Resta
            |Mult
            |Div;


comentario ::= com ;

//ya
expression           ::=andexp Or expression;


//ya
andexp             ::=notexp And andexp
                       |notexp;
//ya
notexp             ::=Not compexp
                       |compexp;

//ya
compexp            ::= addexp operadorcomp addexp;

//ya
addexp              ::= multiexp Suma addexp
                         |multiexp Resta addexp;

//ya
multiexp            ::= negacionexp Mult multiexp
                        |negacionexp Div multiexp;

//ya
negacionexp         ::= Resta value
                        |value;


//ya
value                ::= ParIzq expression ParDer
                         |tipo
                         |Id;